# 最適化された開発フロー設定
# pre-commit: 自動修正のみ（開発速度重視）
# pre-push: 最小限の品質チェック（他開発者への影響防止）

pre-commit:
  commands:
    # 自動フォーマット（ブロッキングなし、即座の修正）
    format:
      glob: "*.{js,ts,cjs,mjs,d.cts,d.mts,jsx,tsx,json,jsonc}"
      run: npx @biomejs/biome check --write --no-errors-on-unmatched --files-ignore-unknown=true --colors=off {staged_files}
      stage_fixed: true
      fail_text: "コード整形に失敗しました"

pre-push:
  parallel: true  # 並列実行で高速化
  commands:
    # 1. 変更影響範囲の型チェック（高速）
    typecheck-changed:
      glob: "*.{ts,tsx}"
      run: |
        # 変更ファイルが属するパッケージを特定して型チェック
        for file in {staged_files}; do
          if [[ $file == apps/* ]] || [[ $file == packages/* ]]; then
            pkg_dir=$(echo $file | cut -d'/' -f1-2)
            pnpm --filter "./$pkg_dir" typecheck 2>/dev/null || true
          fi
        done
      fail_text: "変更ファイルの型チェックに失敗しました"
    
    # 2. 依存関係の整合性確認（必須）
    build-deps:
      run: pnpm --filter @suzumina.click/shared-types build
      fail_text: "共有型のビルドに失敗しました"