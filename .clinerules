# .clinerules

## JavaScript/TypeScript設定

```json
{
  // Biome v1.9.4 の規定値に合わせる
  "javascript": {
    "indent_style": "space",
    "indent_size": 2,
    "quote_type": "double",
    "semicolons": true,
    "max_line_length": 80,
    "trailing_comma": "all",
    "arrow_parens": "always"
  }
}
```

## テスト

- Red-Green-Refactorサイクルを意識して、テストを先に書くことを徹底します。
- テストは常に自動化し、手動で実行することは避けます。
- テストコードは記述的であり、テストの意図を明確にするように心がけます。
- テストコードはArrange-Act-Assertパターンに従い、テストの構造を明確にするように心がけます。

## コードの品質

- 純粋関数を優先し、状態を持たない関数を意識して実装します。
- 可能な限り、関数は1つの責務を持つように心がけます。
- 可能な限り、関数は短く保ち、1つの関数が長くなることは避けます。
- 可能な限り、関数は1つの引数を持つように心がけます。
- 可能な限り、関数は副作用を持たないように心がけます。
- 設計は常にシンプルであることを心がけ、必要以上に複雑な設計は避けます。
- 実装は常にシンプルであることを心がけ、必要以上に複雑な実装は避けます。
- コードの可読性を最優先し、他の人が理解しやすいように心がけます。
- コードの保守性を最優先し、他の人が修正しやすいように心がけます。
- コードの再利用性を最優先し、他の人が再利用しやすいように心がけます。
- コードのテスト可能性を最優先し、他の人がテストしやすいように心がけます。
- コードのパフォーマンスを最優先し、他の人がパフォーマンスを改善しやすいように心がけます。
- コードのセキュリティを最優先し、他の人がセキュリティを改善しやすいように心がけます。
- コードのドキュメントを最優先し、他の人がドキュメントを改善しやすいように心がけます。
- コードのバージョン管理を最優先し、他の人がバージョン管理を改善しやすいように心がけます。
- コードのリファクタリングを最優先し、他の人がリファクタリングを改善しやすいように心がけます。
- 可能な限り、コードの重複を避けるように心がけます。

## Git コミットメッセージ

Conventional Commits 形式を使用:
- feat: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響しない変更
- refactor: リファクタリング
- test: テストの追加・修正
- chore: その他の変更



### ルール設定

#--------------------------------------------------
# 基本設定
#--------------------------------------------------
end_of_line: lf
charset: utf-8
trim_trailing_whitespace: true
insert_final_newline: true

#--------------------------------------------------
# 言語設定
#--------------------------------------------------
# 言語と思考設定
language:
  thinking: "en-US"  # 英語で考える
  output: "ja-JP"  # 日本語で出力する
  enforce_output_language: true  # 出力言語を強制
  translate_comments_if_needed: true  # 必要に応じてコメントを翻訳
  preserve_technical_terms: true  # 技術用語は英語のまま保持可能
  
  conventions:
    variable_names: "english"  # 変数名は英語
    function_names: "english"  # 関数名は英語
    class_names: "english"  # クラス名は英語
    comments: "japanese"  # コメントは日本語
    docs: "japanese"  # ドキュメントは日本語

#--------------------------------------------------
# パッケージ管理設定
#--------------------------------------------------
package_manager:
  typescript: "bun"  # TypeScript/JavaScriptはbunを使用
  python: "uv"  # Pythonはuvを使用
  prefer_latest_versions: true  # 全体設定：常に最新バージョンを優先
  security_scan: true  # セキュリティスキャンを有効化
  allow_prerelease: true  # プレリリースバージョンも許可
  update_frequency: "weekly"  # 更新頻度
  
  bun:
    auto_install_on_save: true
    use_lockfile: true
    check_updates_weekly: true
    prefer_production: false
    scripts_in_package: true
    test_runner: "bun:test"  # bunのテストランナーを使用
    test_pattern: "**/*.test.{ts,tsx,js,jsx}"
    watch_mode: true
    prefer_latest: true  # 常に最新バージョンを使用
    auto_update_dependencies: true  # 依存関係を自動更新
  
  uv:
    use_pyproject_toml: true
    auto_activate_venv: true
    compile_wheels: true
    optimize_installs: true
    use_pip_for_fallback: true
    prefer_latest: true  # 常に最新バージョンを使用
    auto_update_weekly: true  # 週に一度の自動更新
    no_version_pins: true  # バージョン固定を避ける


#--------------------------------------------------
# Python設定
#--------------------------------------------------
python:
  # Ruffのフォーマット設定
  line_length: 88  # Black互換
  indent_width: 4
  quote_style: double
  use_spaces: true
  respect_gitignore: true
  target_version: "py312"  # Python 3.12をターゲット
  
  # Ruffのルール設定
  select:
    - E     # pycodestyle errors
    - F     # pyflakes
    - W     # pycodestyle warnings
    - I     # isort
    - N     # pep8-naming
    - UP    # pyupgrade
    - B     # flake8-bugbear
  ignore:
    - E203  # Black互換：スライスのスペース
  
  # isort互換設定
  imports_order:
    - standard
    - third-party
    - first-party
    - local

#--------------------------------------------------
# ドキュメント設定
#--------------------------------------------------
docs:
  output_dir: "docs"
  generate_api_docs: true
  include_private: false
  include_readme: true
  theme: "default"
  auto_generate_on_save: true
  language: "ja-JP"  # 日本語を優先
  enforce_japanese_comments: true  # コメントは日本語を強制
  translate_base_docs: false  # 基本ドキュメントは翻訳しない

#--------------------------------------------------
# コメント設定
#--------------------------------------------------
comments:
  preferred_language: "ja-JP"  # 日本語を優先
  require_class_comments: true  # クラスにはコメントを必須に
  require_function_comments: true  # 関数にはコメントを必須に
  docstring_style:
    python: "google"  # Pythonはgoogleスタイルのドックストリング
    typescript: "jsdoc"  # TypeScriptはJSDocスタイル
  enforce_japanese: true  # 日本語コメントを推奨

#--------------------------------------------------
# テスト設定
#--------------------------------------------------
testing:
  coverage:
    enabled: true
    threshold: 80  # カバレッジ80%以上を要求
    include_branches: true
    report_dir: "coverage"
    enforce_on_ci: true
  
  requirements:
    run_before_commit: true  # コミット前にテスト実行
    must_pass_all: true  # 全てのテストをパスする必要あり
    fail_on_warning: true  # 警告でも失敗とする
  
  frameworks:
    typescript: "bun:test"  # TypeScriptはbun:testを使用
    python: "pytest"
  
  auto_generate:
    enabled: true  # テストの自動生成を有効化
    template_dir: "test/templates"
    naming_convention: "{name}_test.{ext}"  # テストファイルの命名規則

#--------------------------------------------------
# CI/CD設定
#--------------------------------------------------
ci_cd:
  pre_commit_hooks:
    - lint
    - format
    - test
  
  workflows:
    - name: "test"
      run_on:
        - push
        - pull_request
      steps:
        - lint
        - test
        - coverage
    
    - name: "build"
      run_on:
        - push:
            branches: [main, develop]
        - pull_request:
            branches: [main]
      steps:
        - lint
        - test
        - build
        - package
  
  require_tests_pass: true  # テスト通過を必須に
  block_merge_on_fail: true  # テスト失敗時はマージをブロック

#--------------------------------------------------
# Markdown設定
#--------------------------------------------------
markdown:
  lint: true  # markdownlintを有効化
  rules:
    MD001: true  # 見出しレベルが1つずつ増加するべき
    MD002: true  # 最初の見出しはレベル1であるべき
    MD003: { style: "atx" }  # 見出しスタイル
    MD004: { style: "dash" }  # 箇条書きのスタイル
    MD005: true  # 同じレベルの箇条書きはインデントを揃えるべき
    MD007: { indent: 2 }  # 箇条書きのインデント
    MD009: true  # 行末の空白を検出
    MD010: true  # ハードタブを検出
    MD011: true  # リンク記法が逆になっていないか
    MD012: { maximum: 1 }  # 連続する空行の制限
    MD013: { line_length: 100 }  # 行の長さ制限
    MD014: false  # コマンドの前の$ を許可
    MD018: true  # 見出し記号と見出しテキストの間にスペースが必要
    MD019: true  # 見出し記号の後に複数のスペースがあるべきでない
    MD022: true  # 見出しは前後に空行が必要
    MD023: true  # 見出しの前にスペースがあるべきでない
    MD024: { allow_different_nesting: true }  # 同じ内容の見出しを許可しない
    MD025: true  # 文書に複数のトップレベル見出しがあるべきでない
    MD026: true  # 見出しの末尾に句読点があるべきでない
    MD029: { style: "ordered" }  # 番号付きリストの番号スタイル
    MD030: true  # 箇条書き記号の後のスペース
    MD031: true  # コードブロックの前後の空行
    MD032: true  # リストの前後の空行
    MD033: false  # インラインHTMLを許可
    MD034: true  # 裸のURL
    MD035: { style: "---" }  # 水平線のスタイル
    MD036: false  # 強調されたテキストを見出しとして使用しない
    MD037: true  # 強調マーカーの内側のスペース
    MD038: true  # コードスパン要素の内側のスペース
    MD039: true  # リンクテキスト内の空白
    MD040: true  # コードブロックに言語を指定する
    MD041: true  # 最初の行は見出しにするべき
    MD046: { style: "fenced" }  # コードブロックのスタイル
    MD047: true  # ファイルは改行で終わるべき
  
  auto_fix_on_save: true  # 保存時に自動修正
  ignore_paths:
    - "node_modules/**"
    - "vendor/**"

#--------------------------------------------------
# 特定のディレクトリを除外
#--------------------------------------------------
exclude_patterns:
  - "node_modules/**"
  - "dist/**"
  - "build/**"
  - ".git/**"
  - "venv/**"
  - "__pycache__/**"
