name: 'Terraform 本番環境デプロイ'

on:
  push:
    branches:
      - main
    paths:
      - 'apps/functions/**'
      - 'terraform/**'
      - '.github/workflows/terraform-*'

jobs:
  terraform-production:
    name: 'Terraform 本番環境デプロイ'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4

      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: pnpm のセットアップ
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: 依存関係のキャッシュ
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-functions-${{ hashFiles('apps/functions/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-functions-

      - name: Functionsの依存関係インストール
        run: pnpm install
        working-directory: ./apps/functions
      
      - name: Functionsのビルド
        run: pnpm run build
        working-directory: ./apps/functions

      # Terraformをセットアップ
      - name: Terraform セットアップ
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4
          terraform_wrapper: false

      # GCPの認証を設定
      - name: Google Cloudへの認証
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
          export_environment_variables: true
          create_credentials_file: true
          universe: googleapis.com
          cleanup_credentials: true
          access_token_lifetime: 3600s
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
      
      # 認証アカウントの権限を確認
      - name: サービスアカウントの権限確認
        run: |
          # サービスアカウントのメールアドレスを取得
          SA_EMAIL=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.client_email')
          echo "使用中のサービスアカウント: $SA_EMAIL"
          
          # サービスアカウントの権限を確認
          echo "サービスアカウントの権限一覧:"
          gcloud projects get-iam-policy ${{ env.GOOGLE_CLOUD_PROJECT }} --flatten="bindings[].members" --format='table(bindings.role)' --filter="bindings.members:$SA_EMAIL"
          
          # 必要な権限があるかチェック
          echo "必要な権限チェック:"
          for role in "roles/cloudbuild.admin" "roles/pubsub.admin" "roles/resourcemanager.projectIamAdmin" "roles/run.admin"; do
            echo -n "$role: "
            gcloud projects get-iam-policy ${{ env.GOOGLE_CLOUD_PROJECT }} --flatten="bindings[].members" --format='value(bindings.role)' --filter="bindings.members:$SA_EMAIL AND bindings.role=$role"
            if [ $? -ne 0 ]; then
              echo "見つかりません - 権限が必要です"
            fi
          done

      # GCPプロジェクト番号を取得
      - name: GCPプロジェクト番号を取得
        id: get-project-number
        run: |
          # GCP_SA_KEYからプロジェクト番号を抽出する
          PROJECT_NUMBER=$(echo '${{ secrets.GCP_SA_KEY }}' | jq -r '.project_id' | xargs gcloud projects describe --format='value(projectNumber)')
          echo "PROJECT_NUMBER=${PROJECT_NUMBER}" >> $GITHUB_ENV
          echo "project_number=${PROJECT_NUMBER}" >> $GITHUB_OUTPUT

      # terraform.tfvarsファイルの生成
      - name: terraform.tfvarsファイルの生成
        run: |
          # テンプレートファイルをコピー
          cp terraform/terraform.tfvars.example terraform/terraform.tfvars
          
          # 必要な変数を設定
          cat > terraform/terraform.tfvars << EOF
          # 本番環境用の自動生成された設定ファイル $(date)
          gcp_project_id = "${{ env.GOOGLE_CLOUD_PROJECT }}"
          project_number = "${{ env.PROJECT_NUMBER }}"
          # YouTube APIキーは環境変数として渡すので、ここには含めない
          EOF

      # Terraformの初期化
      - name: Terraform初期化
        run: terraform init
        working-directory: ./terraform

      # 本番環境用のワークスペース準備（デフォルト）
      - name: Terraformワークスペース設定
        run: |
          terraform workspace select default || terraform workspace new default
        working-directory: ./terraform

      # Terraformプラン（変更内容の確認）
      - name: Terraformプラン
        run: |
          terraform plan -var-file="terraform.tfvars" -no-color -input=false
        working-directory: ./terraform
        env:
          TF_VAR_youtube_api_key: ${{ secrets.YOUTUBE_API_KEY }}
      
      # Terraformの適用（本番環境へのデプロイ）
      - name: Terraform適用
        run: |
          terraform apply -var-file="terraform.tfvars" -auto-approve -input=false
        working-directory: ./terraform
        env:
          TF_VAR_youtube_api_key: ${{ secrets.YOUTUBE_API_KEY }}