name: 'Webアプリケーションデプロイ'

on:
  # 再利用可能なワークフローとして呼び出し可能
  workflow_call:
    inputs:
      branch:
        description: 'デプロイするブランチ'
        required: true
        default: 'main'
        type: string
      trigger_source:
        description: 'トリガー元（ci または manual）'
        required: false
        default: 'manual'
        type: string
  
  # 手動トリガー
  workflow_dispatch:
    inputs:
      branch:
        description: 'デプロイするブランチ'
        required: true
        default: 'main'
        type: string
      trigger_source:
        description: 'トリガー元（ci または manual）'
        required: false
        default: 'manual'
        type: string
  
  # 特定パスの変更の場合も自動でデプロイ
  push:
    branches:
      - main
    paths:
      # Web アプリケーション変更時のみ
      - 'apps/web/**'

# Workload Identity Federationに必要な権限設定
permissions:
  contents: read
  id-token: write  # Google Cloud認証に必要

# 環境変数
env:
  REGION: 'asia-northeast1'

jobs:
  # デプロイ条件の確認とバージョン情報の読み取り
  prepare-deployment:
    name: 'デプロイ準備'
    runs-on: ubuntu-latest
    outputs:
      deploy_branch: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}
      node_version: ${{ steps.read_engines.outputs.node_version }}
      pnpm_version: ${{ steps.read_engines.outputs.pnpm_version }}

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}
      
      # package.jsonからenginesのバージョンを読み取る
      - name: パッケージからエンジンバージョンを読み取る
        id: read_engines
        run: |
          # package.jsonからNode.jsとpnpmのバージョンを取得
          NODE_VERSION=$(node -p "require('./package.json').engines.node")
          PNPM_VERSION=$(node -p "require('./package.json').engines.pnpm")
          
          echo "取得したバージョン情報: Node.js=$NODE_VERSION, pnpm=$PNPM_VERSION"
          
          # GitHub Actionsの出力として設定
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "pnpm_version=$PNPM_VERSION" >> $GITHUB_OUTPUT
      
      - name: デプロイ情報を出力
        run: |
          echo "デプロイ情報:"
          echo "- トリガー: ${{ github.event_name }}"
          echo "- ブランチ: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}"
          echo "- Node.js: ${{ steps.read_engines.outputs.node_version }}"
          echo "- pnpm: ${{ steps.read_engines.outputs.pnpm_version }}"
          echo "- コミット: ${{ github.sha }}"
          echo "- 実行者: ${{ github.actor }}"
          echo "- 日時: $(date '+%Y年%m月%d日 %H:%M:%S')"

  # 現在のデプロイ状態の保存（ロールバック用）
  save-current-state:
    name: '現在のデプロイ状態を保存'
    needs: prepare-deployment
    runs-on: ubuntu-latest
    outputs:
      previous_revision: ${{ steps.get-current-revision.outputs.revision }}
      service_url: ${{ steps.get-current-revision.outputs.url }}
    
    steps:
      # Google Cloud認証
      - name: Google Cloud認証の設定
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-run-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
          create_credentials_file: true
          export_environment_variables: true
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        if: steps.auth.outcome == 'success'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # 現在のリビジョン情報を取得
      - name: 現在のリビジョン情報を取得
        id: get-current-revision
        run: |
          # 現在のリビジョンIDを取得
          CURRENT_REVISION=$(gcloud run services describe suzumina-click-nextjs-app \
            --region=${{ env.REGION }} \
            --format="value(status.latestReadyRevisionName)")
          
          # サービスURLを取得
          SERVICE_URL=$(gcloud run services describe suzumina-click-nextjs-app \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "現在のリビジョン: $CURRENT_REVISION"
          echo "サービスURL: $SERVICE_URL"
          
          echo "revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

  # Next.jsウェブアプリケーションのデプロイ
  deploy-web-app:
    name: 'Webアプリケーションデプロイ'
    needs: [prepare-deployment, save-current-state]
    runs-on: ubuntu-latest
    outputs:
      deployed_revision: ${{ steps.deploy-run.outputs.revision }}
      image: ${{ steps.docker-build.outputs.image }}
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare-deployment.outputs.deploy_branch }}
      
      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ needs.prepare-deployment.outputs.node_version }}
          pnpm-version: ${{ needs.prepare-deployment.outputs.pnpm_version }}
          project-path: 'web'
      
      # テスト実行
      - name: Webアプリのテスト
        run: pnpm --filter @suzumina.click/web test

      - name: Next.jsアプリのビルド
        run: pnpm --filter @suzumina.click/web build
      
      # Google Cloud認証
      - name: Google Cloud認証の設定
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-run-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
          create_credentials_file: true
          export_environment_variables: true
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        if: steps.auth.outcome == 'success'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # Dockerの認証設定
      - name: Dockerの認証設定
        if: steps.auth.outcome == 'success'
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      # Artifact Registryリポジトリの確認
      - name: Artifact Registryリポジトリの確認
        run: |
          echo "Artifact Registryリポジトリを確認しています..."
          
          # リポジトリの存在確認のみ行う（Terraformで事前作成済みの前提）
          REPO_EXISTS=$(gcloud artifacts repositories list --location=${{ env.REGION }} --format="value(name)" | grep "^suzumina-click$" || echo "")
          
          if [ -z "$REPO_EXISTS" ]; then
            echo "::error::リポジトリが存在しません。Terraformで事前に作成してください。"
            echo "リポジトリ 'suzumina-click' が見つかりません。"
            exit 1
          else
            echo "リポジトリを確認しました: $REPO_EXISTS"
          fi
      
      # 環境変数の取得
      - name: 環境変数の取得
        id: get-secrets
        run: |
          # 必要な環境変数を取得
          echo "環境変数を取得しています..."
          
          # Firebase Service Account Key (JSONファイルとして保存)
          FIREBASE_SA_KEY=$(gcloud secrets versions access latest --secret="FIREBASE_SERVICE_ACCOUNT_KEY" --project="${{ secrets.GCP_PROJECT_ID }}")
          # シークレットをログに出力しない
          echo "::add-mask::$FIREBASE_SA_KEY"
          # JSONファイルとして保存
          echo "$FIREBASE_SA_KEY" > firebase-service-account.json
          echo "firebase_sa_key_file=firebase-service-account.json" >> $GITHUB_OUTPUT
          
          # Discord認証用環境変数
          DISCORD_CLIENT_ID=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_DISCORD_CLIENT_ID" --project="${{ secrets.GCP_PROJECT_ID }}")
          echo "::add-mask::$DISCORD_CLIENT_ID"
          echo "discord_client_id=$DISCORD_CLIENT_ID" >> $GITHUB_OUTPUT
          
          DISCORD_REDIRECT_URI=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_DISCORD_REDIRECT_URI" --project="${{ secrets.GCP_PROJECT_ID }}")
          echo "::add-mask::$DISCORD_REDIRECT_URI"
          echo "discord_redirect_uri=$DISCORD_REDIRECT_URI" >> $GITHUB_OUTPUT
          
          # Firebase認証用環境変数
          FIREBASE_API_KEY=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_FIREBASE_API_KEY" --project="${{ secrets.GCP_PROJECT_ID }}")
          echo "::add-mask::$FIREBASE_API_KEY"
          echo "firebase_api_key=$FIREBASE_API_KEY" >> $GITHUB_OUTPUT
          
          FIREBASE_AUTH_DOMAIN=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN" --project="${{ secrets.GCP_PROJECT_ID }}")
          echo "::add-mask::$FIREBASE_AUTH_DOMAIN"
          echo "firebase_auth_domain=$FIREBASE_AUTH_DOMAIN" >> $GITHUB_OUTPUT
          
          FIREBASE_PROJECT_ID=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_FIREBASE_PROJECT_ID" --project="${{ secrets.GCP_PROJECT_ID }}")
          echo "::add-mask::$FIREBASE_PROJECT_ID"
          echo "firebase_project_id=$FIREBASE_PROJECT_ID" >> $GITHUB_OUTPUT
          
          FIREBASE_STORAGE_BUCKET=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET" --project="${{ secrets.GCP_PROJECT_ID }}")
          echo "::add-mask::$FIREBASE_STORAGE_BUCKET"
          echo "firebase_storage_bucket=$FIREBASE_STORAGE_BUCKET" >> $GITHUB_OUTPUT
          
          FIREBASE_MESSAGING_SENDER_ID=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID" --project="${{ secrets.GCP_PROJECT_ID }}")
          echo "::add-mask::$FIREBASE_MESSAGING_SENDER_ID"
          echo "firebase_messaging_sender_id=$FIREBASE_MESSAGING_SENDER_ID" >> $GITHUB_OUTPUT
          
          FIREBASE_APP_ID=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_FIREBASE_APP_ID" --project="${{ secrets.GCP_PROJECT_ID }}")
          echo "::add-mask::$FIREBASE_APP_ID"
          echo "firebase_app_id=$FIREBASE_APP_ID" >> $GITHUB_OUTPUT
          
          # Measurement IDはオプション
          FIREBASE_MEASUREMENT_ID=$(gcloud secrets versions access latest --secret="NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID" --project="${{ secrets.GCP_PROJECT_ID }}" 2>/dev/null || echo "")
          if [ ! -z "$FIREBASE_MEASUREMENT_ID" ]; then
            echo "::add-mask::$FIREBASE_MEASUREMENT_ID"
            echo "firebase_measurement_id=$FIREBASE_MEASUREMENT_ID" >> $GITHUB_OUTPUT
          fi
          
          echo "環境変数の取得に成功しました"
      
      # Dockerイメージのビルドとプッシュ
      - name: Dockerイメージのビルドとプッシュ
        id: docker-build
        run: |
          # イメージタグの設定（コミットハッシュとlatestを両方設定）
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_BASE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/suzumina-click/nextjs-app"
          IMAGE_TAG="${IMAGE_BASE}:${GIT_SHA}"
          IMAGE_LATEST="${IMAGE_BASE}:latest"
          
          echo "イメージをビルドしています: ${IMAGE_TAG}"
          
          # ビルドとタグ付け
          docker build -f apps/web/Dockerfile \
            --build-arg FIREBASE_SERVICE_ACCOUNT_KEY_FILE="${{ steps.get-secrets.outputs.firebase_sa_key_file }}" \
            --build-arg NEXT_PUBLIC_DISCORD_CLIENT_ID="${{ steps.get-secrets.outputs.discord_client_id }}" \
            --build-arg NEXT_PUBLIC_DISCORD_REDIRECT_URI="${{ steps.get-secrets.outputs.discord_redirect_uri }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_API_KEY="${{ steps.get-secrets.outputs.firebase_api_key }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ steps.get-secrets.outputs.firebase_auth_domain }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_PROJECT_ID="${{ steps.get-secrets.outputs.firebase_project_id }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ steps.get-secrets.outputs.firebase_storage_bucket }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ steps.get-secrets.outputs.firebase_messaging_sender_id }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_APP_ID="${{ steps.get-secrets.outputs.firebase_app_id }}" \
            --build-arg NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID="${{ steps.get-secrets.outputs.firebase_measurement_id }}" \
            -t ${IMAGE_TAG} -t ${IMAGE_LATEST} .
          
          # イメージのプッシュ
          docker push ${IMAGE_TAG}
          docker push ${IMAGE_LATEST}
          
          echo "イメージがプッシュされました: ${IMAGE_TAG}"
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      
      # Cloud Runへのデプロイ
      - name: Cloud Runへのデプロイ
        id: deploy-run
        run: |
          echo "Cloud Runサービスをデプロイしています..."
          
          # デプロイコマンド
          gcloud run deploy suzumina-click-nextjs-app \
            --image=${{ steps.docker-build.outputs.image }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --quiet --no-traffic
          
          # 新しいリビジョン名を取得
          NEW_REVISION=$(gcloud run revisions list \
            --service=suzumina-click-nextjs-app \
            --region=${{ env.REGION }} \
            --format="value(name)" \
            --sort-by="~createTime" \
            --limit=1)
          
          echo "新しいリビジョン: $NEW_REVISION"
          # GitHub Actionsの出力として設定
          echo "revision=$NEW_REVISION" >> $GITHUB_OUTPUT
          
          echo "デプロイが完了しました"
      
      # デプロイ後の確認
      - name: デプロイ結果の確認
        run: |
          # デプロイされたURLを取得して表示
          URL=$(gcloud run services describe suzumina-click-nextjs-app --platform=managed --region=${{ env.REGION }} --format="value(status.url)")
          echo "デプロイURL: $URL"
          echo "::notice title=Webアプリケーションデプロイ完了::$URL にデプロイされました"

  # 新しいデプロイのヘルスチェック
  health-check:
    name: '新バージョンのヘルスチェック'
    needs: [save-current-state, deploy-web-app]
    runs-on: ubuntu-latest
    outputs:
      is_healthy: ${{ steps.check-health.outputs.is_healthy }}
    
    steps:
      # Google Cloud認証
      - name: Google Cloud認証の設定
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-run-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
          create_credentials_file: true
          export_environment_variables: true
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # 新しいリビジョンをヘルスチェック用に少量のトラフィックを割り当て
      - name: 新リビジョンにテストトラフィックを割り当て
        run: |
          # 現在のリビジョンに95%、新リビジョンに5%を割り当て
          gcloud run services update-traffic suzumina-click-nextjs-app \
            --region=${{ env.REGION }} \
            --to-revisions=${{ needs.save-current-state.outputs.previous_revision }}=95,${{ needs.deploy-web-app.outputs.deployed_revision }}=5
      
      # ヘルスチェック実行
      - name: ヘルスチェックの実行
        id: check-health
        run: |
          echo "新リビジョンのヘルスチェックを実施します..."
          
          # 新リビジョン専用URLを取得
          # {{needs.deploy-web-app.outputs.deployed_revision}}はCloud Runのデプロイステップで設定されたリビジョン名
          NEW_REVISION_URL=$(gcloud run revisions describe ${{ needs.deploy-web-app.outputs.deployed_revision }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "チェック対象URL: $NEW_REVISION_URL"
          
          # URLが正しく取得できたか確認
          if [ -z "$NEW_REVISION_URL" ]; then
            echo "::error::新リビジョンのURLが取得できませんでした。"
            echo "is_healthy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # ヘルスチェック（複数回試行）
          MAX_ATTEMPTS=5
          DELAY_SECONDS=10
          HEALTHY=false
          
          for ((i=1; i<=MAX_ATTEMPTS; i++)); do
            echo "ヘルスチェック試行 $i/$MAX_ATTEMPTS..."
            
            # curlでステータスコードのみを取得
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$NEW_REVISION_URL")
            
            if [[ "$HTTP_STATUS" == "200" ]]; then
              echo "ヘルスチェック成功！HTTPステータス: $HTTP_STATUS"
              HEALTHY=true
              break
            else
              echo "ヘルスチェック失敗。HTTPステータス: $HTTP_STATUS"
              
              if [[ $i < $MAX_ATTEMPTS ]]; then
                echo "$DELAY_SECONDS秒後に再試行します..."
                sleep $DELAY_SECONDS
              fi
            fi
          done
          
          # 結果をGitHub Actionsの出力として設定
          echo "is_healthy=$HEALTHY" >> $GITHUB_OUTPUT
          
          if [[ "$HEALTHY" == "true" ]]; then
            echo "::notice title=ヘルスチェック成功::新リビジョンは正常に動作しています"
          else
            echo "::error title=ヘルスチェック失敗::新リビジョンの動作確認に失敗しました"
          fi

  # トラフィックの切り替え
  traffic-migration:
    name: '本番トラフィック切り替え'
    needs: [save-current-state, deploy-web-app, health-check]
    runs-on: ubuntu-latest
    if: needs.health-check.outputs.is_healthy == 'true'
    
    steps:
      # Google Cloud認証
      - name: Google Cloud認証の設定
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-run-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
          create_credentials_file: true
          export_environment_variables: true
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # トラフィックを新リビジョンに100%切り替え
      - name: 本番トラフィックを新リビジョンに切り替え
        run: |
          echo "トラフィックを新リビジョンに切り替えています..."
          
          gcloud run services update-traffic suzumina-click-nextjs-app \
            --region=${{ env.REGION }} \
            --to-revisions=${{ needs.deploy-web-app.outputs.deployed_revision }}=100
          
          echo "::notice title=トラフィック切り替え完了::本番トラフィックが新リビジョンに切り替えられました"

  # ロールバック処理（ヘルスチェック失敗時）
  rollback:
    name: '自動ロールバック'
    needs: [save-current-state, deploy-web-app, health-check]
    runs-on: ubuntu-latest
    if: needs.health-check.outputs.is_healthy != 'true'
    
    steps:
      # Google Cloud認証
      - name: Google Cloud認証の設定
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-run-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
          create_credentials_file: true
          export_environment_variables: true
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # 前のリビジョンにロールバック
      - name: 前のリビジョンにロールバック
        run: |
          echo "::warning title=デプロイ失敗::ヘルスチェックが失敗したため、前のリビジョンにロールバックします"
          
          # トラフィックを前のリビジョンに戻す
          gcloud run services update-traffic suzumina-click-nextjs-app \
            --region=${{ env.REGION }} \
            --to-revisions=${{ needs.save-current-state.outputs.previous_revision }}=100
          
          echo "::notice title=ロールバック完了::前のリビジョン ${{ needs.save-current-state.outputs.previous_revision }} に戻しました"

  # デプロイ完了通知
  notify-deployment:
    name: 'デプロイ完了通知'
    needs: [save-current-state, deploy-web-app, health-check, traffic-migration, rollback]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: デプロイ結果の通知
        run: |
          # ヘルスチェック結果に基づいてメッセージを分岐
          if [[ "${{ needs.health-check.outputs.is_healthy }}" == "true" ]]; then
            echo "::notice title=Webアプリケーションデプロイ成功::Web アプリケーションが正常にデプロイされ、トラフィックが切り替えられました"
            echo "- リビジョン: ${{ needs.deploy-web-app.outputs.deployed_revision }}"
            echo "- URL: ${{ needs.save-current-state.outputs.service_url }}"
          else
            echo "::warning title=Webアプリケーションデプロイ失敗::デプロイに失敗し、前のバージョンにロールバックしました"
            echo "- 元のリビジョン: ${{ needs.save-current-state.outputs.previous_revision }}"
            echo "- URL: ${{ needs.save-current-state.outputs.service_url }}"
          fi
          
          echo "デプロイ日時: $(date '+%Y年%m月%d日 %H:%M:%S')"
          echo "トリガー: ${{ github.event_name }}"
          echo "実行者: ${{ github.actor }}"