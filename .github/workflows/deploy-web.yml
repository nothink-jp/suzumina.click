name: Deploy Web

on:
  push:
    branches:
      - main
    paths:
      - 'apps/web/**'
      - 'packages/shared-types/**'
      - 'packages/ui/**'
      - '.github/workflows/deploy-web.yml'
  
  # Manual triggering
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-northeast1
  SERVICE_NAME: suzumina-click-web
  REPOSITORY: suzumina-click-web
  IMAGE_NAME: web

jobs:
  check-pr-status:
    name: Check PR Status
    runs-on: ubuntu-latest
    outputs:
      skip-checks: ${{ steps.check.outputs.skip-checks }}
    steps:
      - name: Check if from merged PR
        id: check
        run: |
          # PR„Éû„Éº„Ç∏„Å´„Çà„Çã„Ç≥„Éü„ÉÉ„Éà„ÅÆÂ†¥Âêà„ÄÅ„Åô„Åß„Å´PR„ÉÅ„Çß„ÉÉ„ÇØ„ÅßÊ§úË®ºÊ∏à„Åø
          if [[ "${{ github.event.head_commit.message }}" =~ ^Merge\ pull\ request ]]; then
            echo "skip-checks=true" >> $GITHUB_OUTPUT
            echo "‚úÖ PR already validated, skipping redundant checks"
          else
            echo "skip-checks=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Direct push detected, full checks required"
          fi

  pre-deploy-checks:
    name: Pre-deploy Checks
    runs-on: ubuntu-latest
    needs: check-pr-status
    if: needs.check-pr-status.outputs.skip-checks == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Quick validation
        run: |
          echo "üß™ Running quick validation for direct push..."
          
          # Build dependencies
          pnpm --filter @suzumina.click/shared-types build
          
          # Run critical checks in parallel
          pnpm --filter @suzumina.click/web typecheck &
          TYPECHECK_PID=$!
          
          pnpm --filter @suzumina.click/web test:critical --run &
          TEST_PID=$!
          
          # Wait for results
          if wait $TYPECHECK_PID; then
            echo "‚úÖ TypeScript check passed"
          else
            echo "‚ùå TypeScript check failed"
            exit 1
          fi
          
          if wait $TEST_PID; then
            echo "‚úÖ Critical tests passed"
          else
            echo "‚ùå Critical tests failed"
            exit 1
          fi

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [check-pr-status, pre-deploy-checks]
    if: always() && !failure() && !cancelled()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Google Cloud authentication - Êó©Êúü„Å´ÂÆüË°å
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      # Set up Docker Buildx with advanced caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.23.2
            network=host
      
      # Build and push using docker/build-push-action for better performance
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: |
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: |
            type=registry,ref=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=registry,ref=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      # Deploy to Cloud Run with zero downtime
      - name: Deploy to Cloud Run
        run: |
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          # Deploy without traffic routing first
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --service-account="cloud-run-nextjs@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
            --set-env-vars="NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},NEXTAUTH_URL=https://suzumina.click,AUTH_TRUST_HOST=true,NEXT_PUBLIC_GA_MEASUREMENT_ID=G-9SYZ48LBPH,NEXT_PUBLIC_GTM_ID=GTM-W7QT5PCR" \
            --set-secrets="DISCORD_CLIENT_ID=DISCORD_CLIENT_ID:latest,DISCORD_CLIENT_SECRET=DISCORD_CLIENT_SECRET:latest,NEXTAUTH_SECRET=NEXTAUTH_SECRET:latest,YOUTUBE_API_KEY=YOUTUBE_API_KEY:latest,RESEND_API_KEY=RESEND_API_KEY:latest,CONTACT_EMAIL_RECIPIENTS=CONTACT_EMAIL_RECIPIENTS:latest" \
            --memory 512Mi \
            --cpu 0.5 \
            --min-instances 0 \
            --max-instances 2 \
            --timeout 300 \
            --port 8080 \
            --no-traffic
          
          echo "‚úÖ New revision deployed without traffic"
      
      # Health check and traffic migration
      - name: Health check and traffic migration
        run: |
          # Get the new revision URL
          NEW_REVISION_URL=$(gcloud run revisions list \
            --service ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.address.url)' \
            --limit 1)
          
          echo "New revision URL: $NEW_REVISION_URL"
          
          # Wait for Cloud Run service to become ready
          echo "Waiting for Cloud Run service to become ready..."
          for i in {1..6}; do
            echo "Checking service readiness (attempt $i/6)..."
            SERVICE_STATUS=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
              --region ${{ env.REGION }} \
              --format 'value(status.conditions[0].status)')
            
            if [ "$SERVICE_STATUS" = "True" ]; then
              echo "‚úÖ Service is ready"
              break
            else
              echo "‚è≥ Service not ready yet (status: $SERVICE_STATUS)"
              sleep 10
            fi
          done
          
          # Additional wait for container startup
          echo "Waiting for container to fully start..."
          sleep 30
          
          # Health check on new revision with increased attempts and timeout
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            
            # Debug: Show the actual health check URL
            HEALTH_CHECK_URL="$NEW_REVISION_URL/api/health"
            echo "Checking URL: $HEALTH_CHECK_URL"
            
            # Use longer timeout for curl (10 seconds) and capture response
            RESPONSE=$(curl -s --max-time 10 -w "\n%{http_code}" "$HEALTH_CHECK_URL" 2>&1 || echo -e "\n000")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | head -n-1)
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Health check passed on new revision"
              
              # Migrate traffic to new revision
              echo "Migrating traffic to new revision..."
              gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
                --region ${{ env.REGION }} \
                --to-latest
              
              echo "‚úÖ Traffic migrated successfully"
              
              # Final check on production URL with retries
              echo "Verifying production deployment..."
              sleep 15
              
              for j in {1..3}; do
                PROD_CHECK=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "https://suzumina.click/api/health" || echo "000")
                if [ "$PROD_CHECK" = "200" ]; then
                  echo "‚úÖ Production health check passed"
                  exit 0
                else
                  echo "‚ö†Ô∏è Production check attempt $j/3 failed (HTTP $PROD_CHECK)"
                  sleep 5
                fi
              done
              
              echo "‚ùå Production health check failed after 3 attempts"
              echo "‚ö†Ô∏è Warning: Traffic has been migrated but production health check failed"
              echo "Manual intervention may be required to rollback if necessary"
              exit 1
            else
              echo "‚ùå Health check failed (HTTP $HTTP_CODE)"
              if [ -n "$BODY" ]; then
                echo "Response body: $BODY"
              fi
              
              # Get the latest revision name properly
              REVISION_NAME=$(gcloud run revisions list \
                --service ${{ env.SERVICE_NAME }} \
                --region ${{ env.REGION }} \
                --format 'value(metadata.name)' \
                --limit 1)
              
              # Check if the revision exists and is serving
              if [ -n "$REVISION_NAME" ]; then
                REVISION_STATUS=$(gcloud run revisions describe $REVISION_NAME \
                  --region ${{ env.REGION }} \
                  --format 'value(status.conditions[0].message)' 2>/dev/null || echo "Failed to get status")
                echo "Revision $REVISION_NAME status: $REVISION_STATUS"
              else
                echo "Failed to get revision name"
              fi
              
              # Exponential backoff for retries
              if [ $i -le 5 ]; then
                sleep 15
              else
                sleep 30
              fi
            fi
          done
          
          echo "‚ùå Health check failed after 10 attempts"
          echo "Please check Cloud Run logs for more details"
          exit 1
      
      # Parallel cleanup
      - name: Cleanup old resources
        if: always()
        run: |
          echo "üßπ Starting parallel cleanup..."
          
          # Cloud Run revisions cleanup (background)
          (
            REVISIONS=$(gcloud run revisions list \
              --service="${{ env.SERVICE_NAME }}" \
              --region="${{ env.REGION }}" \
              --sort-by="~metadata.creationTimestamp" \
              --format="value(metadata.name)" \
              --limit=10)
            
            if [ -n "$REVISIONS" ]; then
              REVISION_ARRAY=($REVISIONS)
              TOTAL=${#REVISION_ARRAY[@]}
              
              if [ $TOTAL -gt 3 ]; then
                echo "Cleaning up $((TOTAL-3)) old revisions..."
                for ((i=3; i<TOTAL; i++)); do
                  gcloud run revisions delete "${REVISION_ARRAY[$i]}" \
                    --region="${{ env.REGION }}" \
                    --quiet || true
                done
              fi
            fi
          ) &
          REVISION_PID=$!
          
          # Docker images cleanup (background)
          (
            IMAGES=$(gcloud artifacts docker images list \
              "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}" \
              --sort-by="CREATE_TIME" \
              --format="value(IMAGE)" \
              --limit=20)
            
            if [ -n "$IMAGES" ]; then
              IMAGE_ARRAY=($IMAGES)
              TOTAL=${#IMAGE_ARRAY[@]}
              
              if [ $TOTAL -gt 5 ]; then
                echo "Cleaning up $((TOTAL-5)) old images..."
                for ((i=0; i<$((TOTAL-5)); i++)); do
                  gcloud artifacts docker images delete "${IMAGE_ARRAY[$i]}" \
                    --delete-tags \
                    --quiet || true
                done
              fi
            fi
          ) &
          IMAGE_PID=$!
          
          # Wait for both cleanup processes
          wait $REVISION_PID $IMAGE_PID
          echo "‚úÖ Parallel cleanup completed"