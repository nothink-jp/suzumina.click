name: Deploy to Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - '.github/workflows/deploy-cloud-run.yml'
  
  # Manual triggering
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-northeast1
  SERVICE_NAME: suzumina-click-web
  REPOSITORY: suzumina-click-web
  IMAGE_NAME: web

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Enable Corepack
        run: corepack enable
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Build shared types
        run: pnpm --filter @suzumina.click/shared-types build
      
      - name: Build UI components
        run: pnpm --filter @suzumina.click/ui build
      
      - name: Run tests
        run: pnpm --filter web test
      
      - name: Run linting
        run: pnpm --filter web lint
      
      - name: Run type checking
        run: pnpm --filter web typecheck
      
      # Google Cloud authentication
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      # Build and push Docker image
      - name: Build and push Docker image
        run: |
          # Generate image tag
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          LATEST_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest"
          
          # Build Docker image from project root using web app's Dockerfile
          docker build \
            --platform linux/amd64 \
            --file apps/web/Dockerfile \
            --tag $IMAGE_TAG \
            --tag $LATEST_TAG \
            .
          
          # Push both tags
          docker push $IMAGE_TAG
          docker push $LATEST_TAG
          
          # Save image tag for deployment
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      
      # Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_TAG }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --service-account="cloud-run-nextjs@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
            --set-env-vars="NODE_ENV=production,NEXT_TELEMETRY_DISABLED=1,GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},NEXTAUTH_URL=https://suzumina.click,AUTH_TRUST_HOST=true" \
            --set-secrets="DISCORD_CLIENT_ID=DISCORD_CLIENT_ID:latest,DISCORD_CLIENT_SECRET=DISCORD_CLIENT_SECRET:latest,DISCORD_BOT_TOKEN=DISCORD_BOT_TOKEN:latest,NEXTAUTH_SECRET=NEXTAUTH_SECRET:latest,YOUTUBE_API_KEY=YOUTUBE_API_KEY:latest" \
            --memory 2Gi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --timeout 300 \
            --port 8080

      # Ensure public access is properly configured
      - name: Configure public access
        run: |
          echo "Configuring public access for Cloud Run service..."
          
          # Remove any existing IAM bindings first to ensure clean state
          gcloud run services remove-iam-policy-binding ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --quiet || echo "No existing policy binding to remove"
          
          # Add IAM policy binding for public access
          gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --member="allUsers" \
            --role="roles/run.invoker"
          
          # Verify the policy was applied
          echo "Verifying IAM policy..."
          gcloud run services get-iam-policy ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format="yaml"
      
      # Health check
      - name: Wait for deployment and health check
        run: |
          # Get service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          
          echo "Service URL: $SERVICE_URL"
          
          # Wait for deployment to be ready and IAM to propagate
          echo "Waiting for deployment and IAM policy propagation..."
          sleep 60
          
          # Health check with more retries and better error handling
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SERVICE_URL/api/health" || echo "000")
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Health check passed (HTTP $HTTP_CODE)"
              curl -s "$SERVICE_URL/api/health" | jq '.' || echo "Response received"
              exit 0
            else
              echo "❌ Health check failed (HTTP $HTTP_CODE) - attempt $i/10"
              if [ "$HTTP_CODE" = "403" ]; then
                echo "403 Forbidden - IAM policy may still be propagating..."
              elif [ "$HTTP_CODE" = "404" ]; then
                echo "404 Not Found - service may still be starting..."
              elif [ "$HTTP_CODE" = "000" ]; then
                echo "Connection failed - service may be unavailable..."
              fi
              sleep 15
            fi
          done
          
          echo "❌ Health check failed after 10 attempts"
          echo "Final attempt details:"
          curl -v "$SERVICE_URL/api/health" || true
          exit 1
      
      # Cleanup old images
      - name: Cleanup old images
        run: |
          echo "Cleaning up old Docker images (keeping last 5 versions)"
          
          # Get list of images sorted by creation time (newest first)
          gcloud artifacts docker images list \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }} \
            --include-tags \
            --sort-by="~CREATE_TIME" \
            --format="value(IMAGE)" \
            --limit=20 | tail -n +6 | \
            while read image; do
              if [ -n "$image" ]; then
                echo "Deleting image: $image"
                # Use --delete-tags to automatically remove tags before deleting image
                gcloud artifacts docker images delete "$image" \
                  --delete-tags \
                  --quiet \
                  --async || {
                  echo "Failed to delete $image, but continuing..."
                }
              fi
            done || true  # Don't fail the entire workflow if cleanup fails