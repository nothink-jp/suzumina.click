name: Deploy Cloud Functions

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared-types
        run: pnpm --filter=@suzumina.click/shared-types build

      - name: Build functions
        run: pnpm --filter=@suzumina.click/functions build

      - name: Run tests
        run: pnpm --filter=@suzumina.click/functions test

      - name: Authenticate to GCP
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-functions-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create deployment bundle
        run: |
          # 一時的なデプロイメントディレクトリを作成
          mkdir -p ./deployment-temp
          
          # shared-typesをパッケージ化
          cd packages/shared-types
          pnpm pack --pack-destination ../../deployment-temp
          
          # パッケージファイル名を確実に取得
          cd ../../deployment-temp
          SHARED_TYPES_FILE=$(ls suzumina.click-shared-types-*.tgz | head -n1)
          echo "Found shared-types package: $SHARED_TYPES_FILE"
          
          # functionsのビルド成果物とpackage.jsonをコピー
          cp -r ../apps/functions/lib ./
          cp ../apps/functions/package.json ./
          
          # workspace依存関係を実際のファイルパスに変更
          sed -i "s|\"@suzumina.click/shared-types\": \"workspace:\*\"|\"@suzumina.click/shared-types\": \"file:./$SHARED_TYPES_FILE\"|g" package.json
          
          # 開発用スクリプトとdevDependenciesを削除
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            
            // 開発用スクリプトを削除
            if (pkg.scripts) {
              delete pkg.scripts.build;
              delete pkg.scripts['build:watch'];
              delete pkg.scripts.lint;
              delete pkg.scripts.format;
              delete pkg.scripts.check;
              delete pkg.scripts.test;
              delete pkg.scripts['test:watch'];
              delete pkg.scripts['test:coverage'];
            }
            
            // devDependenciesを削除
            delete pkg.devDependencies;
            
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          
          # 依存関係をインストール（production用）
          pnpm install --prod --frozen-lockfile
          
          # デプロイ用のアーカイブを作成
          tar -czf ../functions-deployment.tar.gz *
          cd ..
          
          echo "Deployment bundle created: functions-deployment.tar.gz"

      - name: Upload to Cloud Storage
        run: |
          # デプロイ用のCloud Storageバケットを作成（存在しない場合）
          BUCKET_NAME="${{ secrets.GCP_PROJECT_ID }}-functions-deployment"
          
          # バケットが存在するかチェック
          if ! gsutil ls gs://$BUCKET_NAME/ &>/dev/null; then
            echo "Creating deployment bucket: $BUCKET_NAME"
            gsutil mb -p ${{ secrets.GCP_PROJECT_ID }} -l asia-northeast1 gs://$BUCKET_NAME/
          else
            echo "Deployment bucket already exists: $BUCKET_NAME"
          fi
          
          # アーカイブをアップロード
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          ARCHIVE_NAME="functions-${TIMESTAMP}.tar.gz"
          
          gsutil cp functions-deployment.tar.gz gs://$BUCKET_NAME/$ARCHIVE_NAME
          echo "Uploaded: gs://$BUCKET_NAME/$ARCHIVE_NAME"
          
          # 環境変数として保存
          echo "DEPLOYMENT_SOURCE=gs://$BUCKET_NAME/$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Deploy fetchYouTubeVideos function
        run: |
          gcloud functions deploy fetchYouTubeVideos \
            --source ${{ env.DEPLOYMENT_SOURCE }} \
            --runtime nodejs22 \
            --entry-point fetchYouTubeVideos \
            --trigger-topic youtube-video-fetch-trigger \
            --region asia-northeast1 \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --set-env-vars NODE_ENV=production \
            --memory 512MB \
            --timeout 540s \
            --max-instances 10 \
            --quiet

      - name: Deploy fetchDLsiteWorks function
        run: |
          gcloud functions deploy fetchDLsiteWorks \
            --source ${{ env.DEPLOYMENT_SOURCE }} \
            --runtime nodejs22 \
            --entry-point fetchDLsiteWorks \
            --trigger-topic dlsite-works-fetch-trigger \
            --region asia-northeast1 \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --set-env-vars NODE_ENV=production \
            --memory 512MB \
            --timeout 540s \
            --max-instances 10 \
            --quiet

      - name: Cleanup deployment artifacts
        if: always()
        run: |
          # 一時ファイルを削除
          rm -rf ./deployment-temp
          rm -f functions-deployment.tar.gz
          
          # 古いデプロイメントファイルを削除（最新5個を保持）
          if [ ! -z "${{ env.BUCKET_NAME }}" ]; then
            echo "Cleaning up old deployment files..."
            gsutil ls gs://${{ env.BUCKET_NAME }}/functions-*.tar.gz | \
              sort -r | \
              tail -n +6 | \
              xargs -r gsutil rm || echo "No old files to clean up"
          fi

      - name: Deploy status summary
        run: |
          echo "## 🚀 デプロイ結果" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 デプロイされた関数" >> $GITHUB_STEP_SUMMARY
          echo "- **fetchYouTubeVideos**: ✅ デプロイ完了" >> $GITHUB_STEP_SUMMARY
          echo "  - トリガー: \`youtube-video-fetch-trigger\` (Pub/Sub)" >> $GITHUB_STEP_SUMMARY
          echo "- **fetchDLsiteWorks**: ✅ デプロイ完了" >> $GITHUB_STEP_SUMMARY
          echo "  - トリガー: \`dlsite-works-fetch-trigger\` (Pub/Sub)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 設定情報" >> $GITHUB_STEP_SUMMARY
          echo "- **プロジェクト**: \`${{ secrets.GCP_PROJECT_ID }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **リージョン**: \`asia-northeast1\`" >> $GITHUB_STEP_SUMMARY
          echo "- **ランタイム**: \`nodejs22\`" >> $GITHUB_STEP_SUMMARY
          echo "- **メモリ**: \`512MB\`" >> $GITHUB_STEP_SUMMARY
          echo "- **タイムアウト**: \`540秒\`" >> $GITHUB_STEP_SUMMARY
          echo "- **デプロイソース**: \`${{ env.DEPLOYMENT_SOURCE }}\`" >> $GITHUB_STEP_SUMMARY