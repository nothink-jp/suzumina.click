name: Deploy Functions

on:
  push:
    branches:
      - main
    paths:
      - 'apps/functions/**'
      - 'packages/shared-types/**'
      - '.github/workflows/deploy-functions.yml'
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  check-pr-status:
    name: Check PR Status
    runs-on: ubuntu-latest
    outputs:
      skip-checks: ${{ steps.check.outputs.skip-checks }}
    steps:
      - name: Check if from merged PR
        id: check
        run: |
          # PR„Éû„Éº„Ç∏„Å´„Çà„Çã„Ç≥„Éü„ÉÉ„Éà„ÅÆÂ†¥Âêà„ÄÅ„Åô„Åß„Å´PR„ÉÅ„Çß„ÉÉ„ÇØ„ÅßÊ§úË®ºÊ∏à„Åø
          if [[ "${{ github.event.head_commit.message }}" =~ ^Merge\ pull\ request ]]; then
            echo "skip-checks=true" >> $GITHUB_OUTPUT
            echo "‚úÖ PR already validated, skipping redundant checks"
          else
            echo "skip-checks=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Direct push detected, full checks required"
          fi

  pre-deploy-checks:
    name: Pre-deploy Checks
    runs-on: ubuntu-latest
    needs: check-pr-status
    if: needs.check-pr-status.outputs.skip-checks == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Quick validation
        run: |
          echo "üß™ Running quick validation for direct push..."
          
          # Build shared-types
          pnpm --filter=@suzumina.click/shared-types build
          
          # Run build and test in parallel
          pnpm --filter=@suzumina.click/functions build &
          BUILD_PID=$!
          
          # Wait for build to complete
          if wait $BUILD_PID; then
            echo "‚úÖ Build completed"
          else
            echo "‚ùå Build failed"
            exit 1
          fi
          
          # Run critical tests
          NODE_ENV=test pnpm --filter=@suzumina.click/functions test --bail 1
          echo "‚úÖ Critical tests passed"

  deploy:
    name: Deploy Functions
    runs-on: ubuntu-latest
    needs: [check-pr-status, pre-deploy-checks]
    if: always() && !failure() && !cancelled()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: |
          echo "üî® Building packages..."
          pnpm --filter=@suzumina.click/shared-types build
          pnpm --filter=@suzumina.click/functions build

      - name: Authenticate to GCP
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-functions-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create deployment bundle
        run: |
          # ‰∏ÄÊôÇÁöÑ„Å™„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
          mkdir -p ./deployment-temp
          
          # shared-types„Çí„Éë„ÉÉ„Ç±„Éº„Ç∏Âåñ
          cd packages/shared-types
          pnpm pack --pack-destination ../../deployment-temp
          
          # „Éë„ÉÉ„Ç±„Éº„Ç∏„Éï„Ç°„Ç§„É´Âêç„ÇíÁ¢∫ÂÆü„Å´ÂèñÂæó
          cd ../../deployment-temp
          SHARED_TYPES_FILE=$(ls suzumina.click-shared-types-*.tgz | head -n1)
          echo "Found shared-types package: $SHARED_TYPES_FILE"
          
          # functions„ÅÆ„Éì„É´„ÉâÊàêÊûúÁâ©„Å®package.json„Çí„Ç≥„Éî„Éº
          cp -r ../apps/functions/lib ./
          cp ../apps/functions/package.json ./
          
          # Node.js„Çπ„ÇØ„É™„Éó„Éà„Åßpackage.json„ÇíÂÆâÂÖ®„Å´Â§âÊõ¥
          SHARED_TYPES_FILE="$SHARED_TYPES_FILE" node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            
            // workspace‰æùÂ≠òÈñ¢‰øÇ„ÇíÂÆüÈöõ„ÅÆ„Éï„Ç°„Ç§„É´„Éë„Çπ„Å´Â§âÊõ¥
            if (pkg.dependencies && pkg.dependencies['@suzumina.click/shared-types']) {
              pkg.dependencies['@suzumina.click/shared-types'] = 'file:./' + process.env.SHARED_TYPES_FILE;
            }
            
            // ÈñãÁô∫Áî®„Çπ„ÇØ„É™„Éó„Éà„ÇíÂâäÈô§
            if (pkg.scripts) {
              delete pkg.scripts.build;
              delete pkg.scripts['build:watch'];
              delete pkg.scripts.lint;
              delete pkg.scripts.format;
              delete pkg.scripts.check;
              delete pkg.scripts.test;
              delete pkg.scripts['test:watch'];
              delete pkg.scripts['test:coverage'];
            }
            
            // devDependencies„ÇíÂâäÈô§
            delete pkg.devDependencies;
            
            // Cloud Functions v2„Åß„ÅØFunctions Framework„ÅåËá™ÂãïÁöÑ„Å´Ëµ∑Âãï„Åô„Çã„Åü„ÇÅ„ÄÅ
            // start„Çπ„ÇØ„É™„Éó„Éà„ÅØ‰∏çË¶Å„ÄÇmain„Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà„ÅÆ„ÅøË®≠ÂÆö
            pkg.main = 'lib/endpoints/index.js';
            
            // engines„Éï„Ç£„Éº„É´„Éâ„ÇÇÁ¢∫ÂÆü„Å´Ë®≠ÂÆö
            if (!pkg.engines) {
              pkg.engines = {};
            }
            pkg.engines.node = '22';
            
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "
          
          # ‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´ÔºàproductionÁî®Ôºâ
          pnpm install --prod --frozen-lockfile
          
          # „Éá„Éó„É≠„Ç§Áî®„ÅÆzip„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàêÔºàCloud Functions„ÅØzip„ÇíË¶ÅÊ±ÇÔºâ
          zip -r ../functions-deployment.zip *
          cd ..
          
          echo "Deployment bundle created: functions-deployment.zip"

      - name: Upload to Cloud Storage
        run: |
          # „Éá„Éó„É≠„Ç§Áî®„ÅÆCloud Storage„Éê„Ç±„ÉÉ„ÉàÂêç„ÇíË®≠ÂÆö
          BUCKET_NAME="${{ secrets.GCP_PROJECT_ID }}-functions-deployment"
          
          # „Éê„Ç±„ÉÉ„Éà„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
          if ! gsutil ls gs://$BUCKET_NAME/ &>/dev/null; then
            echo "‚ùå Error: Deployment bucket does not exist: gs://$BUCKET_NAME"
            exit 1
          else
            echo "‚úÖ Deployment bucket exists: $BUCKET_NAME"
          fi
          
          # „Ç¢„Éº„Ç´„Ç§„Éñ„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          ARCHIVE_NAME="functions-${TIMESTAMP}.zip"
          
          echo "üì§ Uploading deployment archive..."
          gsutil cp functions-deployment.zip gs://$BUCKET_NAME/$ARCHIVE_NAME
          echo "‚úÖ Uploaded: gs://$BUCKET_NAME/$ARCHIVE_NAME"
          
          # Áí∞Â¢ÉÂ§âÊï∞„Å®„Åó„Å¶‰øùÂ≠ò
          echo "DEPLOYMENT_SOURCE=gs://$BUCKET_NAME/$ARCHIVE_NAME" >> $GITHUB_ENV
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV

      - name: Deploy functions in parallel
        run: |
          echo "üöÄ Deploying functions in parallel..."
          
          # ÂêÑÈñ¢Êï∞„ÅÆ„Éá„Éó„É≠„Ç§„Çí‰∏¶ÂàóÂÆüË°å
          declare -A deploy_pids
          
          # fetchYouTubeVideos
          gcloud functions deploy fetchYouTubeVideos \
            --gen2 \
            --source ${{ env.DEPLOYMENT_SOURCE }} \
            --runtime nodejs22 \
            --entry-point fetchYouTubeVideos \
            --trigger-topic youtube-video-fetch-trigger \
            --region asia-northeast1 \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --set-env-vars NODE_ENV=production,FUNCTION_SIGNATURE_TYPE=cloudevent,FUNCTION_TARGET=fetchYouTubeVideos \
            --memory 256Mi \
            --timeout 540s \
            --max-instances 3 \
            --service-account fetch-youtube-videos-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --quiet &
          deploy_pids["fetchYouTubeVideos"]=$!
          
          # fetchDLsiteUnifiedData
          gcloud functions deploy fetchDLsiteUnifiedData \
            --gen2 \
            --source ${{ env.DEPLOYMENT_SOURCE }} \
            --runtime nodejs22 \
            --entry-point fetchDLsiteUnifiedData \
            --trigger-topic dlsite-individual-api-trigger \
            --region asia-northeast1 \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --set-env-vars NODE_ENV=production,FUNCTION_SIGNATURE_TYPE=cloudevent,FUNCTION_TARGET=fetchDLsiteUnifiedData,INDIVIDUAL_INFO_API_ENABLED=true,API_ONLY_MODE=true,MAX_CONCURRENT_API_REQUESTS=5,API_REQUEST_DELAY_MS=500,ENABLE_DATA_VALIDATION=true,MINIMUM_QUALITY_SCORE=80,ENABLE_TIMESERIES_INTEGRATION=true,LOG_LEVEL=info \
            --memory 512Mi \
            --timeout 300s \
            --max-instances 1 \
            --service-account fetch-dlsite-individual-api-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --quiet &
          deploy_pids["fetchDLsiteUnifiedData"]=$!
          
          # checkDataIntegrity
          gcloud functions deploy checkDataIntegrity \
            --gen2 \
            --source ${{ env.DEPLOYMENT_SOURCE }} \
            --runtime nodejs22 \
            --entry-point checkDataIntegrity \
            --trigger-topic data-integrity-check-trigger \
            --region asia-northeast1 \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --set-env-vars NODE_ENV=production,FUNCTION_SIGNATURE_TYPE=cloudevent,FUNCTION_TARGET=checkDataIntegrity \
            --memory 256Mi \
            --timeout 540s \
            --max-instances 1 \
            --service-account data-integrity-check-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --quiet &
          deploy_pids["checkDataIntegrity"]=$!
          
          # ÂÖ®„Éá„Éó„É≠„Ç§„ÅÆÂÆå‰∫Ü„ÇíÂæÖ„Å§
          failed=false
          for func_name in "${!deploy_pids[@]}"; do
            if wait ${deploy_pids[$func_name]}; then
              echo "‚úÖ $func_name deployed successfully"
            else
              echo "‚ùå $func_name deployment failed"
              failed=true
            fi
          done
          
          if $failed; then
            echo "‚ùå Some deployments failed"
            exit 1
          else
            echo "üéâ All functions deployed successfully"
          fi

      - name: Cleanup
        if: always()
        run: |
          # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§
          rm -rf ./deployment-temp
          rm -f functions-deployment.zip
          
          # Âè§„ÅÑ„Éá„Éó„É≠„Ç§„É°„É≥„Éà„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§ÔºàÊúÄÊñ∞5ÂÄã„Çí‰øùÊåÅÔºâ
          if [ ! -z "${{ env.BUCKET_NAME }}" ]; then
            echo "Cleaning up old deployment files..."
            gsutil ls gs://${{ env.BUCKET_NAME }}/functions-*.zip | \
              sort -r | \
              tail -n +6 | \
              xargs -r gsutil rm || echo "No old files to clean up"
          fi
          
          # Cloud Functions „É™„Éì„Ç∏„Éß„É≥„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
          echo "üßπ Cleaning up old Cloud Functions revisions..."
          
          FUNCTIONS=("fetchyoutubevideos" "fetchdlsiteunifieddata" "checkdataintegrity")
          KEEP_COUNT=3
          
          for function_name in "${FUNCTIONS[@]}"; do
            echo "Processing function: $function_name"
            
            revisions=$(gcloud run revisions list \
              --service="$function_name" \
              --region="asia-northeast1" \
              --project="${{ secrets.GCP_PROJECT_ID }}" \
              --sort-by="~metadata.creationTimestamp" \
              --format="value(metadata.name)" \
              --limit=10)
            
            if [ -z "$revisions" ]; then
              continue
            fi
            
            revision_array=($revisions)
            total_count=${#revision_array[@]}
            
            if [ $total_count -le $KEEP_COUNT ]; then
              continue
            fi
            
            for ((i=KEEP_COUNT; i<total_count; i++)); do
              revision=${revision_array[$i]}
              echo "Deleting revision: $revision"
              gcloud run revisions delete "$revision" \
                --region="asia-northeast1" \
                --project="${{ secrets.GCP_PROJECT_ID }}" \
                --quiet || true
            done
          done || true

      - name: Deploy summary
        run: |
          echo "## üöÄ „Éá„Éó„É≠„Ç§ÁµêÊûú" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ „Éá„Éó„É≠„Ç§„Åï„Çå„ÅüÈñ¢Êï∞" >> $GITHUB_STEP_SUMMARY
          echo "- **fetchYouTubeVideos**: ‚úÖ „Éá„Éó„É≠„Ç§ÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
          echo "- **fetchDLsiteUnifiedData**: ‚úÖ „Éá„Éó„É≠„Ç§ÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
          echo "- **checkDataIntegrity**: ‚úÖ „Éá„Éó„É≠„Ç§ÂÆå‰∫Ü" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üõ°Ô∏è ÊúÄÈÅ©Âåñ„ÅÆÊîπÂñÑÁÇπ" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ PR„Éû„Éº„Ç∏ÊôÇ„ÅÆÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÂõûÈÅø" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ ‰∏¶Âàó„Éá„Éó„É≠„Ç§„ÅßÈ´òÈÄüÂåñ" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Ëá™Âãï„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÔºàÊúÄÊñ∞3„É™„Éì„Ç∏„Éß„É≥„Çí‰øùÊåÅÔºâ" >> $GITHUB_STEP_SUMMARY