name: '本番環境デプロイ'

on:
  # 手動トリガー
  workflow_dispatch:
    inputs:
      branch:
        description: 'デプロイするブランチ'
        required: true
        default: 'main'
        type: string
  
  # mainブランチへのマージ後、CI成功時に自動実行
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed
  
  # 特定パスの変更の場合も自動でデプロイ（ファイル単位の変更検知）
  push:
    branches:
      - main
    paths:
      # Web アプリケーション変更時
      - 'apps/web/**'
      # Cloud Functions 変更時
      - 'apps/functions/**'

# Workload Identity Federationに必要な権限設定
permissions:
  contents: read
  id-token: write  # Google Cloud認証に必要

# リージョン設定のみ残し、Node.jsとpnpmのバージョンはpackage.jsonから読み取る
env:
  REGION: 'asia-northeast1'

jobs:
  # デプロイ条件の確認とバージョン情報の読み取り
  verify-deployment-conditions:
    name: 'デプロイ条件の確認'
    runs-on: ubuntu-latest
    # CIワークフローが成功した場合または手動トリガーの場合、またはパス変更時に実行
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'push'
    
    outputs:
      deploy_branch: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}
      node_version: ${{ steps.read_engines.outputs.node_version }}
      pnpm_version: ${{ steps.read_engines.outputs.pnpm_version }}
      web_changed: ${{ steps.filter.outputs.web || 'false' }}
      functions_changed: ${{ steps.filter.outputs.functions || 'false' }}

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 1 }}  # push時は差分検出のため2に設定
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}

      # push時のみパス変更を検出
      - name: パス変更検出
        if: github.event_name == 'push'
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
            functions:
              - 'apps/functions/**'
      
      # 手動トリガーやCI成功後のデプロイ時はすべての対象をデプロイ
      - name: 手動/CI成功後の場合は全デプロイを設定
        if: github.event_name != 'push'
        run: |
          echo "web=true" >> $GITHUB_OUTPUT
          echo "functions=true" >> $GITHUB_OUTPUT
        id: non_push_filter

      # package.jsonからenginesのバージョンを読み取る
      - name: パッケージからエンジンバージョンを読み取る
        id: read_engines
        run: |
          # package.jsonからNode.jsとpnpmのバージョンを取得
          NODE_VERSION=$(node -p "require('./package.json').engines.node")
          PNPM_VERSION=$(node -p "require('./package.json').engines.pnpm")
          
          echo "取得したバージョン情報: Node.js=$NODE_VERSION, pnpm=$PNPM_VERSION"
          
          # GitHub Actionsの出力として設定
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "pnpm_version=$PNPM_VERSION" >> $GITHUB_OUTPUT
      
      - name: デプロイ情報を出力
        run: |
          echo "デプロイ情報:"
          echo "- トリガー: ${{ github.event_name }}"
          echo "- ブランチ: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}"
          echo "- Webアプリ変更: ${{ steps.filter.outputs.web == 'true' || steps.non_push_filter.outputs.web == 'true' && '変更あり' || '変更なし' }}"
          echo "- Functions変更: ${{ steps.filter.outputs.functions == 'true' || steps.non_push_filter.outputs.functions == 'true' && '変更あり' || '変更なし' }}"
          echo "- Node.js: ${{ steps.read_engines.outputs.node_version }}"
          echo "- pnpm: ${{ steps.read_engines.outputs.pnpm_version }}"
          echo "- コミット: ${{ github.sha }}"
          echo "- 実行者: ${{ github.actor }}"
          echo "- 日時: $(date '+%Y年%m月%d日 %H:%M:%S')"

  # Next.jsウェブアプリケーションのデプロイ
  deploy-web-app:
    name: 'Webアプリケーションデプロイ'
    needs: verify-deployment-conditions
    # 変更検知で変更がある場合、または手動・CI経由の場合に実行
    if: |
      needs.verify-deployment-conditions.outputs.web_changed == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'workflow_run'
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.verify-deployment-conditions.outputs.deploy_branch }}
      
      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ needs.verify-deployment-conditions.outputs.node_version }}
          pnpm-version: ${{ needs.verify-deployment-conditions.outputs.pnpm_version }}
          project-path: 'web'
      
      # テスト実行
      - name: Webアプリのテスト
        run: pnpm --filter @suzumina.click/web test

      - name: Next.jsアプリのビルド
        run: pnpm --filter @suzumina.click/web build
      
      # Google Cloud認証
      - name: Google Cloud認証の設定
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-run-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # Dockerの認証設定
      - name: Dockerの認証設定
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
      
      # Artifact Registryリポジトリの確認
      - name: Artifact Registryリポジトリの確認
        run: |
          echo "Artifact Registryリポジトリを確認しています..."
          
          # リポジトリの存在確認のみ行う（Terraformで事前作成済みの前提）
          REPO_EXISTS=$(gcloud artifacts repositories list --location=${{ env.REGION }} --format="value(name)" | grep "^suzumina-click$" || echo "")
          
          if [ -z "$REPO_EXISTS" ]; then
            echo "::error::リポジトリが存在しません。Terraformで事前に作成してください。"
            echo "リポジトリ 'suzumina-click' が見つかりません。"
            exit 1
          else
            echo "リポジトリを確認しました: $REPO_EXISTS"
          fi
      
      # Dockerイメージのビルドとプッシュ
      - name: Dockerイメージのビルドとプッシュ
        id: docker-build
        run: |
          # イメージタグの設定（コミットハッシュとlatestを両方設定）
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_BASE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/suzumina-click/nextjs-app"
          IMAGE_TAG="${IMAGE_BASE}:${GIT_SHA}"
          IMAGE_LATEST="${IMAGE_BASE}:latest"
          
          echo "イメージをビルドしています: ${IMAGE_TAG}"
          
          # サービスアカウントの確認（デバッグ情報として記録）
          echo "サービスアカウントの確認..."
          CURRENT_SA=$(gcloud auth list --filter=status:ACTIVE --format='value(account)')
          echo "使用中のサービスアカウント: $CURRENT_SA"
          
          # Secret Managerからサービスアカウントキーを直接取得
          echo "Firebase Service Account Keyを取得しています..."
          FIREBASE_SA_KEY=$(gcloud secrets versions access latest \
            --secret="FIREBASE_SERVICE_ACCOUNT_KEY" \
            --project="${{ secrets.GCP_PROJECT_ID }}" 2>&1) || { 
              echo "::error::Firebase Service Account Keyの取得に失敗しました" 
              echo "エラー: $FIREBASE_SA_KEY"
              exit 1
            }
          
          echo "Firebase Service Account Keyを取得しました"
          
          # Discord認証用環境変数を直接取得
          echo "Discord認証用環境変数を取得しています..."
          
          # クライアント側で必要な環境変数を個別に取得
          echo "Discord Client IDを取得しています..."
          DISCORD_CLIENT_ID=$(gcloud secrets versions access latest \
            --secret="NEXT_PUBLIC_DISCORD_CLIENT_ID" \
            --project="${{ secrets.GCP_PROJECT_ID }}" 2>&1) || { 
              echo "::error::Discord Client IDの取得に失敗しました"
              echo "エラー: $DISCORD_CLIENT_ID" 
              exit 1
            }
          
          echo "Discord Redirect URIを取得しています..."
          DISCORD_REDIRECT_URI=$(gcloud secrets versions access latest \
            --secret="NEXT_PUBLIC_DISCORD_REDIRECT_URI" \
            --project="${{ secrets.GCP_PROJECT_ID }}" 2>&1) || {
              echo "::error::Discord Redirect URIの取得に失敗しました"
              echo "エラー: $DISCORD_REDIRECT_URI"
              exit 1
            }
          
          echo "Discord認証用環境変数の取得に成功しました"
          
          # ビルドとタグ付け
          # Dockerfileの場所を明示的に指定し、コンテキストをリポジトリのルートに設定
          # 必要な環境変数をビルド引数として渡す
          docker build -f apps/web/Dockerfile \
            --build-arg FIREBASE_SERVICE_ACCOUNT_KEY="$FIREBASE_SA_KEY" \
            --build-arg NEXT_PUBLIC_DISCORD_CLIENT_ID="$DISCORD_CLIENT_ID" \
            --build-arg NEXT_PUBLIC_DISCORD_REDIRECT_URI="$DISCORD_REDIRECT_URI" \
            -t ${IMAGE_TAG} -t ${IMAGE_LATEST} .
          
          # イメージのプッシュ
          docker push ${IMAGE_TAG}
          docker push ${IMAGE_LATEST}
          
          echo "イメージがプッシュされました: ${IMAGE_TAG}"
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      
      # Cloud Runへのデプロイ
      - name: Cloud Runへのデプロイ
        id: deploy-run
        run: |
          echo "Cloud Runサービスをデプロイしています..."
          
          # デプロイコマンド
          gcloud run deploy suzumina-click-nextjs-app \
            --image=${{ steps.docker-build.outputs.image }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --quiet
          
          echo "デプロイが完了しました"
      
      # デプロイ後の確認
      - name: デプロイ結果の確認
        run: |
          # デプロイされたURLを取得して表示
          URL=$(gcloud run services describe suzumina-click-nextjs-app --platform=managed --region=${{ env.REGION }} --format="value(status.url)")
          echo "デプロイURL: $URL"
          echo "::notice title=Webアプリケーションデプロイ完了::$URL にデプロイされました"

  # Cloud Functionsのデプロイ
  deploy-cloud-functions:
    name: 'Cloud Functionsデプロイ'
    needs: [verify-deployment-conditions, deploy-web-app]
    # 変更検知で変更がある場合、または手動・CI経由の場合に実行
    if: |
      needs.verify-deployment-conditions.outputs.functions_changed == 'true' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'workflow_run'
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.verify-deployment-conditions.outputs.deploy_branch }}
      
      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ needs.verify-deployment-conditions.outputs.node_version }}
          pnpm-version: ${{ needs.verify-deployment-conditions.outputs.pnpm_version }}
          project-path: 'functions'

      # テスト実行
      - name: Cloud Functionsのテスト
        run: pnpm --filter @suzumina.click/functions test
      
      - name: Cloud Functionsのビルド
        run: pnpm --filter @suzumina.click/functions build
      
      # Google Cloud認証
      - name: Google Cloud認証の設定
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-functions-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # pushイベント時は変更があったファイルだけをデプロイ
      - name: 変更された関数の検出（push時のみ）
        if: github.event_name == 'push'
        id: changed-functions
        run: |
          # 変更されたファイルからexportされている関数名を抽出
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep "^apps/functions/src/.*\.ts$" | grep -v "\.test\.ts$" || true)
          if [ -z "$CHANGED_FILES" ]; then
            echo "変更された関数ファイルはありません"
            echo "names=" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          FUNCTIONS=""
          for FILE in $CHANGED_FILES; do
            FUNCS=$(grep -o "export.*async function [a-zA-Z0-9_]\+" $FILE | sed -E 's/export.*function ([a-zA-Z0-9_]+).*/\1/' || true)
            if [ -n "$FUNCS" ]; then
              FUNCTIONS="$FUNCTIONS $FUNCS"
            fi
          done
          
          # 重複を削除して整形
          FUNCTIONS=$(echo "$FUNCTIONS" | tr ' ' '\n' | sort | uniq | tr '\n' ' ')
          echo "デプロイする関数: $FUNCTIONS"
          echo "names=$FUNCTIONS" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT

      # 手動/CI経由の場合は全関数を対象にする
      - name: すべての関数を取得（手動/CI経由の場合）
        if: github.event_name != 'push'
        id: all-functions
        run: |
          # デバッグ出力を追加
          echo "関数の検索を開始します..."
          echo "検索ディレクトリ構造:"
          find ./apps/functions/src -type f -name "*.ts" | sort
          
          # より確実な関数検出方法に変更（複数パターンで検索）
          echo "Cloud Functions関数を検索中..."
          
          # エクスポートされている関数を検索（複数のパターンを考慮）
          EXPORTED_FUNCTIONS=$(grep -r -l "export.*function" ./apps/functions/src --include="*.ts" | grep -v ".test.ts")
          echo "エクスポート関数ファイル一覧:"
          echo "$EXPORTED_FUNCTIONS"
          
          # 関数名を抽出（複数のパターンに対応）
          FUNCTIONS=""
          for FILE in $EXPORTED_FUNCTIONS; do
            echo "ファイル $FILE から関数を抽出しています..."
            # 標準的なexport function pattern
            FUNCS1=$(grep -o "export.*function [a-zA-Z0-9_]\+" $FILE | grep -v "interface\|type\|class" | sed -E 's/.*function ([a-zA-Z0-9_]+).*/\1/' || echo "")
            # アロー関数パターン
            FUNCS2=$(grep -o "export const [a-zA-Z0-9_]\+ = async" $FILE | sed -E 's/export const ([a-zA-Z0-9_]+).*/\1/' || echo "")
            
            ALL_FUNCS="$FUNCS1 $FUNCS2"
            if [ -n "$ALL_FUNCS" ]; then
              echo "抽出された関数: $ALL_FUNCS"
              FUNCTIONS="$FUNCTIONS $ALL_FUNCS"
            else
              echo "関数が抽出されませんでした"
              # ファイルの内容を表示（デバッグ用）
              echo "ファイル内容の一部:"
              head -n 20 $FILE
            fi
          done
          
          # main関数がterraformで定義されている可能性を考慮
          echo "Terraformファイルを確認..."
          TERRAFORM_FUNCTIONS=$(grep -o 'youtube_entry_point.*=.*"\w\+"' ./terraform/*.tf | grep -o '"[^"]\+"' | tr -d '"' || echo "")
          if [ -n "$TERRAFORM_FUNCTIONS" ]; then
            echo "Terraformで定義された関数: $TERRAFORM_FUNCTIONS"
            FUNCTIONS="$FUNCTIONS $TERRAFORM_FUNCTIONS"
          fi
          
          # index.tsで明示的に登録されている関数を確認
          echo "index.tsで明示的に登録されている関数を確認..."
          INDEX_FUNCTIONS=$(grep -o 'functions\.cloudEvent.*"\w\+"' ./apps/functions/src/index.ts | grep -o '"[^"]\+"' | tr -d '"' || echo "")
          if [ -n "$INDEX_FUNCTIONS" ]; then
            echo "index.tsに登録された関数: $INDEX_FUNCTIONS"
            FUNCTIONS="$FUNCTIONS $INDEX_FUNCTIONS"
          fi
          
          # 重複を削除して整形
          FUNCTIONS=$(echo "$FUNCTIONS" | tr ' ' '\n' | grep -v '^$' | sort | uniq | tr '\n' ' ')
          
          # 関数が見つからない場合は、Terraformの定義から強制的に取得を試みる
          if [ -z "$FUNCTIONS" ]; then
            echo "警告: 通常の方法では関数が見つかりませんでした。Terraformファイルから強制的に抽出します。"
            FUNCTIONS=$(grep -o "_entry_point.*=.*\"\w\+\"" ./terraform/*.tf | grep -o '"[^"]\+"' | tr -d '"' || echo "fetchYouTubeVideos")
            echo "Terraformから抽出された関数: $FUNCTIONS"
          fi
          
          echo "デプロイする関数: $FUNCTIONS"
          echo "names=$FUNCTIONS" >> $GITHUB_OUTPUT

      # 関数デプロイ - push時の変更された関数のみ
      - name: 変更されたCloud Functionsのデプロイ（push時）
        if: github.event_name == 'push' && steps.changed-functions.outputs.has_changes == 'true'
        run: |
          # 関数名のリストをスペースで分割して処理
          FUNCTIONS="${{ steps.changed-functions.outputs.names }}"
          for FUNC in $FUNCTIONS; do
            echo "関数 $FUNC をデプロイしています..."
            
            # 関数のトリガータイプ情報を取得
            TRIGGER_TYPE=""
            TOPIC_NAME=""
            
            # Terraformファイルから関数のトリガータイプを検出
            if grep -q "name.*=.*\"$FUNC\"" ./terraform/*.tf; then
              # HTTPトリガーかPub/Subトリガーか判定
              if grep -A20 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep -q "trigger_http"; then
                TRIGGER_TYPE="http"
              elif grep -A30 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep -q "event_trigger"; then
                # Pub/Sub、Cloud Storage、Firestoreなどのイベントトリガー
                if grep -A40 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep -q "pubsub_topic"; then
                  TRIGGER_TYPE="pubsub"
                  # トピック名を抽出
                  TOPIC_ID=$(grep -A40 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep "pubsub_topic" | sed -E 's/.*pubsub_topic.*=.*"([^"]+)".*/\1/' || echo "")
                  if [ -n "$TOPIC_ID" ]; then
                    # google_pubsub_topic.トピック名.id の形式からトピック名を抽出
                    TOPIC_NAME=$(echo $TOPIC_ID | sed -E 's/.*google_pubsub_topic\.([^\.]+)\.id.*/\1/' || echo "")
                  fi
                elif grep -A40 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep -q "storage"; then
                  TRIGGER_TYPE="storage"
                fi
              fi
            else
              # Terraformに定義がない場合は関数自体を検査
              if grep -A10 "export.*function.*$FUNC" ./apps/functions/src/*.ts | grep -q "apiRoute"; then
                TRIGGER_TYPE="http"
              fi
            fi
            
            # トリガータイプ未検出の場合はデフォルトでHTTPトリガーを使用（一般的なケース）
            if [ -z "$TRIGGER_TYPE" ]; then
              echo "警告: 関数 $FUNC のトリガータイプが検出できませんでした。デフォルトでHTTPトリガーを使用します。"
              TRIGGER_TYPE="http"
            fi
            
            # トリガータイプに基づいて適切なデプロイパラメータを設定
            TRIGGER_PARAMS=""
            case $TRIGGER_TYPE in
              http)
                TRIGGER_PARAMS="--trigger-http"
                ;;
              pubsub)
                if [ -n "$TOPIC_NAME" ]; then
                  echo "Pub/Subトリガー: トピック '$TOPIC_NAME' を使用します"
                  TRIGGER_PARAMS="--trigger-topic=$TOPIC_NAME"
                else
                  # トピック名が取得できない場合はデフォルトトピック名を使用
                  echo "警告: Pub/Subトリガー用のトピック名が取得できませんでした。デフォルト名を使用します。"
                  TRIGGER_PARAMS="--trigger-topic=${FUNC}_topic"
                fi
                ;;
              storage)
                echo "Cloud Storageトリガーは現在サポートされていません。HTTPトリガーを使用します。"
                TRIGGER_PARAMS="--trigger-http"
                ;;
              *)
                TRIGGER_PARAMS="--trigger-http"
                ;;
            esac

            echo "トリガータイプ: $TRIGGER_TYPE, パラメータ: $TRIGGER_PARAMS"
            
            # gcloudコマンドで関数をデプロイ
            gcloud functions deploy $FUNC \
              --gen2 \
              --region=${{ env.REGION }} \
              --runtime=nodejs20 \
              --source=./apps/functions \
              --entry-point=$FUNC \
              $TRIGGER_PARAMS
            
            if [ $? -eq 0 ]; then
              echo "関数 $FUNC のデプロイに成功しました"
            else
              echo "関数 $FUNC のデプロイに失敗しました"
              exit 1
            fi
          done

      # 関数デプロイ - 手動/CI経由の場合は全関数をデプロイ
      - name: すべてのCloud Functionsのデプロイ（手動/CI経由）
        if: github.event_name != 'push'
        run: |
          # 関数名のリストをスペースで分割して処理
          FUNCTIONS="${{ steps.all-functions.outputs.names }}"
          for FUNC in $FUNCTIONS; do
            echo "関数 $FUNC をデプロイしています..."
            
            # 関数のトリガータイプ情報を取得
            TRIGGER_TYPE=""
            TOPIC_NAME=""
            
            # Terraformファイルから関数のトリガータイプを検出
            if grep -q "name.*=.*\"$FUNC\"" ./terraform/*.tf; then
              # HTTPトリガーかPub/Subトリガーか判定
              if grep -A20 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep -q "trigger_http"; then
                TRIGGER_TYPE="http"
              elif grep -A30 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep -q "event_trigger"; then
                # Pub/Sub、Cloud Storage、Firestoreなどのイベントトリガー
                if grep -A40 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep -q "pubsub_topic"; then
                  TRIGGER_TYPE="pubsub"
                  # トピック名を抽出
                  TOPIC_ID=$(grep -A40 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep "pubsub_topic" | sed -E 's/.*pubsub_topic.*=.*"([^"]+)".*/\1/' || echo "")
                  if [ -n "$TOPIC_ID" ]; then
                    # google_pubsub_topic.トピック名.id の形式からトピック名を抽出
                    TOPIC_NAME=$(echo $TOPIC_ID | sed -E 's/.*google_pubsub_topic\.([^\.]+)\.id.*/\1/' || echo "")
                  fi
                elif grep -A40 "name.*=.*\"$FUNC\"" ./terraform/*.tf | grep -q "storage"; then
                  TRIGGER_TYPE="storage"
                fi
              fi
            else
              # Terraformに定義がない場合は関数自体を検査
              if grep -A10 "export.*function.*$FUNC" ./apps/functions/src/*.ts | grep -q "apiRoute"; then
                TRIGGER_TYPE="http"
              fi
            fi
            
            # トリガータイプ未検出の場合はデフォルトでHTTPトリガーを使用（一般的なケース）
            if [ -z "$TRIGGER_TYPE" ]; then
              echo "警告: 関数 $FUNC のトリガータイプが検出できませんでした。デフォルトでHTTPトリガーを使用します。"
              TRIGGER_TYPE="http"
            fi
            
            # トリガータイプに基づいて適切なデプロイパラメータを設定
            TRIGGER_PARAMS=""
            case $TRIGGER_TYPE in
              http)
                TRIGGER_PARAMS="--trigger-http"
                ;;
              pubsub)
                if [ -n "$TOPIC_NAME" ]; then
                  echo "Pub/Subトリガー: トピック '$TOPIC_NAME' を使用します"
                  TRIGGER_PARAMS="--trigger-topic=$TOPIC_NAME"
                else
                  # トピック名が取得できない場合はデフォルトトピック名を使用
                  echo "警告: Pub/Subトリガー用のトピック名が取得できませんでした。デフォルト名を使用します。"
                  TRIGGER_PARAMS="--trigger-topic=${FUNC}_topic"
                fi
                ;;
              storage)
                echo "Cloud Storageトリガーは現在サポートされていません。HTTPトリガーを使用します。"
                TRIGGER_PARAMS="--trigger-http"
                ;;
              *)
                TRIGGER_PARAMS="--trigger-http"
                ;;
            esac

            echo "トリガータイプ: $TRIGGER_TYPE, パラメータ: $TRIGGER_PARAMS"
            
            # gcloudコマンドで関数をデプロイ
            gcloud functions deploy $FUNC \
              --gen2 \
              --region=${{ env.REGION }} \
              --runtime=nodejs20 \
              --source=./apps/functions \
              --entry-point=$FUNC \
              $TRIGGER_PARAMS
            
            if [ $? -eq 0 ]; then
              echo "関数 $FUNC のデプロイに成功しました"
            else
              echo "関数 $FUNC のデプロイに失敗しました"
              exit 1
            fi
          done

      # デプロイ情報の出力
      - name: デプロイサマリー（push時）
        if: github.event_name == 'push' && steps.changed-functions.outputs.has_changes == 'true'
        run: |
          FUNCTIONS="${{ steps.changed-functions.outputs.names }}"
          echo "デプロイ完了した関数:"
          for FUNC in $FUNCTIONS; do
            DETAILS=$(gcloud functions describe $FUNC --region=${{ env.REGION }} --gen2 --format="yaml(url)")
            URL=$(echo "$DETAILS" | grep "url:" | awk '{print $2}')
            echo "- $FUNC: $URL"
          done
          echo "::notice title=Cloud Functionsデプロイ完了::変更された関数がデプロイされました"

      # デプロイ情報の出力（手動/CI経由の場合）
      - name: デプロイサマリー（手動/CI経由）
        if: github.event_name != 'push'
        run: |
          FUNCTIONS="${{ steps.all-functions.outputs.names }}"
          echo "デプロイ完了した関数:"
          for FUNC in $FUNCTIONS; do
            DETAILS=$(gcloud functions describe $FUNC --region=${{ env.REGION }} --gen2 --format="yaml(url)")
            URL=$(echo "$DETAILS" | grep "url:" | awk '{print $2}')
            echo "- $FUNC: $URL"
          done
          echo "::notice title=Cloud Functionsデプロイ完了::すべての関数がデプロイされました"
      
      # 変更がなかった場合のメッセージ（push時のみ）
      - name: デプロイ不要メッセージ
        if: github.event_name == 'push' && steps.changed-functions.outputs.has_changes != 'true'
        run: |
          echo "::notice title=Cloud Functions変更なし::デプロイが必要な関数の変更はありませんでした"

  # デプロイ完了通知
  notify-deployment:
    name: 'デプロイ完了通知'
    needs: [verify-deployment-conditions, deploy-web-app, deploy-cloud-functions]
    # いずれかのデプロイが実行された場合に通知
    if: |
      always() &&
      (needs.deploy-web-app.result == 'success' || needs.deploy-cloud-functions.result == 'success')
    runs-on: ubuntu-latest
    
    steps:
      - name: デプロイ完了メッセージ
        run: |
          echo "::notice title=本番環境デプロイ完了::コンポーネントが正常にデプロイされました"
          echo "デプロイ日時: $(date '+%Y年%m月%d日 %H:%M:%S')"
          echo "トリガー: ${{ github.event_name }}"
          echo "実行者: ${{ github.actor }}"