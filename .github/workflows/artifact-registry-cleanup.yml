name: Artifact Registry Cleanup

on:
  # 毎日午前2時（UTC）に実行（JST 11時）
  schedule:
    - cron: '0 2 * * *'
  
  # Manual triggering
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (true/false)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: asia-northeast1
  REPOSITORY: suzumina-click-web
  GCF_REPOSITORY: gcf-artifacts

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
          
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      
      - name: Verify authentication
        run: gcloud auth list
      
      - name: Clean up old images
        run: |
          echo "🧹 Starting Artifact Registry cleanup..."
          
          DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
          REPOSITORY_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}"
          
          # 関数: イメージのクリーンアップ
          cleanup_images() {
            local image_name=$1
            local keep_count=$2
            
            echo "📦 Processing ${image_name} (keeping ${keep_count} recent images)..."
            
            # タグ付きイメージの一覧を取得（作成日時の降順）
            local tagged_images=$(gcloud artifacts docker images list \
              ${REPOSITORY_PATH}/${image_name} \
              --include-tags \
              --filter="tags:*" \
              --format="value(IMAGE@DIGEST,createTime)" \
              --sort-by="~createTime" | head -n ${keep_count})
            
            if [ -z "$tagged_images" ]; then
              echo "ℹ️  No tagged images found for ${image_name}"
              return
            fi
            
            echo "✅ Keeping ${keep_count} most recent tagged images for ${image_name}"
            
            # 古いタグなしイメージを削除
            local untagged_images=$(gcloud artifacts docker images list \
              ${REPOSITORY_PATH}/${image_name} \
              --filter="NOT tags:* AND createTime < '$(date -d '7 days ago' -u +%Y-%m-%dT%H:%M:%SZ)'" \
              --format="value(IMAGE@DIGEST)")
            
            if [ -n "$untagged_images" ]; then
              echo "🗑️  Found $(echo "$untagged_images" | wc -l) old untagged images to delete"
              
              if [ "$DRY_RUN" = "true" ]; then
                echo "🔍 DRY RUN: Would delete the following untagged images:"
                echo "$untagged_images"
              else
                echo "Deleting old untagged images..."
                echo "$untagged_images" | while read -r image_digest; do
                  if [ -n "$image_digest" ]; then
                    echo "Deleting: $image_digest"
                    gcloud artifacts docker images delete "$image_digest" --quiet || echo "Failed to delete $image_digest"
                  fi
                done
              fi
            else
              echo "✨ No old untagged images to delete for ${image_name}"
            fi
            
            # cache タグの付いたイメージを削除
            local cache_images=$(gcloud artifacts docker tags list \
              ${REPOSITORY_PATH}/${image_name} \
              --filter="tag:cache" \
              --format="value(name)")
            
            if [ -n "$cache_images" ]; then
              echo "🧹 Found cache tagged images to clean up"
              
              if [ "$DRY_RUN" = "true" ]; then
                echo "🔍 DRY RUN: Would delete cache tags:"
                echo "$cache_images"
              else
                echo "Deleting cache tags..."
                echo "$cache_images" | while read -r cache_tag; do
                  if [ -n "$cache_tag" ]; then
                    echo "Deleting cache tag: $cache_tag"
                    gcloud artifacts docker tags delete "$cache_tag" --quiet || echo "Failed to delete cache tag $cache_tag"
                  fi
                done
              fi
            fi
          }

          # 関数: Cloud Functions用イメージのクリーンアップ
          cleanup_cloud_functions() {
            local repository_path=$1
            echo "🔧 Processing Cloud Functions repository: ${repository_path}"
            
            # Cloud Functions パッケージ一覧を取得
            local packages=$(gcloud artifacts packages list \
              --repository=$(basename ${repository_path}) \
              --location=${{ env.REGION }} \
              --format="value(name)" | grep -v "/cache$" || true)
            
            if [ -z "$packages" ]; then
              echo "ℹ️  No Cloud Functions packages found"
              return
            fi
            
            echo "📋 Found Cloud Functions packages:"
            echo "$packages"
            
            # 各パッケージ（Function）について処理
            echo "$packages" | while read -r package_name; do
              if [ -n "$package_name" ]; then
                local package_basename=$(basename "$package_name")
                echo "🔍 Processing function package: ${package_basename}"
                
                # パッケージ内の全イメージを取得（制限なし）
                local all_versions=$(gcloud artifacts docker images list \
                  ${repository_path}/${package_basename} \
                  --format="value(IMAGE,DIGEST,createTime)" \
                  --sort-by="~createTime")
                
                if [ -n "$all_versions" ]; then
                  local versions_count=$(echo "$all_versions" | wc -l)
                  echo "  📊 Found ${versions_count} versions for ${package_basename}"
                  
                  # 最新5つを除いた古いバージョンを削除
                  local old_versions=$(gcloud artifacts docker images list \
                    ${repository_path}/${package_basename} \
                    --format="csv[no-heading](IMAGE,DIGEST)" \
                    --sort-by="~createTime" | tail -n +6 | sed 's/,/@/')
                  
                  if [ -n "$old_versions" ]; then
                    local old_count=$(echo "$old_versions" | wc -l)
                    echo "  🗑️  Found ${old_count} old versions to delete"
                    
                    if [ "$DRY_RUN" = "true" ]; then
                      echo "  🔍 DRY RUN: Would delete the following old versions:"
                      echo "$old_versions" | sed 's/^/    /'
                    else
                      echo "  ⚡ Deleting old versions..."
                      echo "$old_versions" | while read -r old_version; do
                        if [ -n "$old_version" ]; then
                          echo "    Deleting: $old_version"
                          gcloud artifacts docker images delete "$old_version" --quiet || echo "    Failed to delete $old_version"
                        fi
                      done
                    fi
                  else
                    echo "  ✨ No old versions to delete (≤5 versions total)"
                  fi
                else
                  echo "  ℹ️  No versions found for ${package_basename}"
                fi
                
                # 古いタグなしイメージを削除（7日以上前）
                local old_untagged=$(gcloud artifacts docker images list \
                  ${repository_path}/${package_basename} \
                  --filter="NOT tags:* AND createTime < '$(date -d '7 days ago' -u +%Y-%m-%dT%H:%M:%SZ)'" \
                  --format="csv[no-heading](IMAGE,DIGEST)" | sed 's/,/@/')
                
                if [ -n "$old_untagged" ]; then
                  local untagged_count=$(echo "$old_untagged" | wc -l)
                  echo "  🧹 Found ${untagged_count} old untagged images to delete"
                  
                  if [ "$DRY_RUN" = "true" ]; then
                    echo "  🔍 DRY RUN: Would delete the following untagged images:"
                    echo "$old_untagged" | sed 's/^/    /'
                  else
                    echo "  ⚡ Deleting old untagged images..."
                    echo "$old_untagged" | while read -r untagged_image; do
                      if [ -n "$untagged_image" ]; then
                        echo "    Deleting untagged: $untagged_image"
                        gcloud artifacts docker images delete "$untagged_image" --quiet || echo "    Failed to delete $untagged_image"
                      fi
                    done
                  fi
                else
                  echo "  ✨ No old untagged images to delete"
                fi
              fi
            done
            
            # Cache イメージの削除
            echo "🧹 Cleaning up cache images..."
            local cache_packages=$(gcloud artifacts packages list \
              --repository=$(basename ${repository_path}) \
              --location=${{ env.REGION }} \
              --format="value(name)" | grep "/cache$" || true)
            
            if [ -n "$cache_packages" ]; then
              echo "🗑️  Found cache packages to clean up"
              echo "$cache_packages" | while read -r cache_package; do
                if [ -n "$cache_package" ]; then
                  local cache_basename=$(basename "$cache_package")
                  local parent_package=$(dirname "$cache_package" | xargs basename)
                  echo "  🧽 Processing cache for ${parent_package}"
                  
                  # Cache内の古いイメージを削除（1つだけ保持）
                  local cache_images=$(gcloud artifacts docker images list \
                    ${repository_path}/${parent_package}/cache \
                    --format="csv[no-heading](IMAGE,DIGEST)" \
                    --sort-by="~createTime" | tail -n +2 | sed 's/,/@/')
                  
                  if [ -n "$cache_images" ]; then
                    if [ "$DRY_RUN" = "true" ]; then
                      echo "    🔍 DRY RUN: Would delete cache images:"
                      echo "$cache_images" | sed 's/^/      /'
                    else
                      echo "    ⚡ Deleting old cache images..."
                      echo "$cache_images" | while read -r cache_image; do
                        if [ -n "$cache_image" ]; then
                          echo "      Deleting cache: $cache_image"
                          gcloud artifacts docker images delete "$cache_image" --quiet || echo "      Failed to delete cache $cache_image"
                        fi
                      done
                    fi
                  else
                    echo "    ✨ No old cache images to delete"
                  fi
                fi
              done
            else
              echo "ℹ️  No cache packages found"
            fi
          }
          
          echo "🏁 Starting cleanup process..."
          
          # メインWebアプリケーションイメージのクリーンアップ（最新5つを保持）
          cleanup_images "web" 5
          
          # Admin アプリケーションイメージのクリーンアップ（最新3つを保持）
          cleanup_images "suzumina-admin" 3
          
          echo ""
          echo "🔧 Starting Cloud Functions cleanup..."
          
          # Cloud Functions用リポジトリのクリーンアップ
          GCF_REPOSITORY_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GCF_REPOSITORY }}"
          cleanup_cloud_functions "$GCF_REPOSITORY_PATH"
          
          echo "✅ All Artifact Registry cleanup completed!"
          
      - name: Report cleanup results
        run: |
          echo "📊 Post-cleanup repository status:"
          gcloud artifacts repositories list --project=${{ env.PROJECT_ID }} --location=${{ env.REGION }}
          
          echo ""
          echo "📦 Current images in Web repository:"
          gcloud artifacts docker images list \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }} \
            --include-tags \
            --limit=10
          
          echo ""
          echo "🔧 Current images in Cloud Functions repository:"
          gcloud artifacts docker images list \
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GCF_REPOSITORY }} \
            --include-tags \
            --limit=10
          
          echo ""
          echo "📋 Cloud Functions packages summary:"
          gcloud artifacts packages list \
            --repository=${{ env.GCF_REPOSITORY }} \
            --location=${{ env.REGION }} \
            --format="table(name,createTime,updateTime)"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Artifact Registry cleanup failed!"
          echo "Please check the workflow logs for details."