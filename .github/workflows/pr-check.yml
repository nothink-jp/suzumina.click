name: PR Check

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  
  # Manual triggering for testing
  workflow_dispatch:

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      web: ${{ steps.changes.outputs.web }}
      admin: ${{ steps.changes.outputs.admin }}
      functions: ${{ steps.changes.outputs.functions }}
      shared-types: ${{ steps.changes.outputs.shared-types }}
      ui: ${{ steps.changes.outputs.ui }}
      typescript-config: ${{ steps.changes.outputs.typescript-config }}
      workflows: ${{ steps.changes.outputs.workflows }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
            admin:
              - 'apps/admin/**'
            functions:
              - 'apps/functions/**'
            shared-types:
              - 'packages/shared-types/**'
            ui:
              - 'packages/ui/**'
            typescript-config:
              - 'packages/typescript-config/**'
            workflows:
              - '.github/workflows/**'

  parallel-check:
    name: Parallel Quality Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: changes
    if: needs.changes.outputs.web == 'true' || needs.changes.outputs.admin == 'true' || needs.changes.outputs.functions == 'true' || needs.changes.outputs.shared-types == 'true' || needs.changes.outputs.ui == 'true'
    timeout-minutes: 8
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      # 並列ビルド（高速化）
      - name: Build dependencies in parallel
        run: |
          echo "🔨 Building dependencies in parallel..."
          
          # 必要なビルドを並列実行
          declare -a build_pids
          
          # shared-typesのビルド
          if [[ "${{ needs.changes.outputs.shared-types }}" == "true" || 
                "${{ needs.changes.outputs.web }}" == "true" || 
                "${{ needs.changes.outputs.admin }}" == "true" || 
                "${{ needs.changes.outputs.functions }}" == "true" ]]; then
            pnpm --filter @suzumina.click/shared-types build &
            build_pids+=("$!:shared-types")
          fi
          
          # UIのビルド（必要な場合）
          if [[ "${{ needs.changes.outputs.ui }}" == "true" ]]; then
            pnpm --filter @suzumina.click/ui build &
            build_pids+=("$!:ui")
          fi
          
          # 全ビルドの完了を待つ
          for pid_info in "${build_pids[@]}"; do
            pid=${pid_info%%:*}
            name=${pid_info#*:}
            if wait $pid; then
              echo "✅ $name build completed"
            else
              echo "❌ $name build failed"
              exit 1
            fi
          done
      
      # 完全並列実行による品質チェック
      - name: Run all quality checks in parallel
        run: |
          echo "🧪 Running quality checks in parallel..."
          
          # 実行するチェックを管理
          declare -A checks
          
          # Web app checks
          if [[ "${{ needs.changes.outputs.web }}" == "true" ]]; then
            pnpm --filter @suzumina.click/web lint 2>&1 | sed 's/^/[web-lint] /' &
            checks["web-lint"]=$!
            
            pnpm --filter @suzumina.click/web typecheck 2>&1 | sed 's/^/[web-typecheck] /' &
            checks["web-typecheck"]=$!
            
            pnpm --filter @suzumina.click/web test --run --passWithNoTests 2>&1 | sed 's/^/[web-test] /' &
            checks["web-test"]=$!
          fi
          
          # Admin app checks
          if [[ "${{ needs.changes.outputs.admin }}" == "true" ]]; then
            pnpm --filter @suzumina.click/admin lint 2>&1 | sed 's/^/[admin-lint] /' &
            checks["admin-lint"]=$!
            
            pnpm --filter @suzumina.click/admin typecheck 2>&1 | sed 's/^/[admin-typecheck] /' &
            checks["admin-typecheck"]=$!
            
            pnpm --filter @suzumina.click/admin test --run --passWithNoTests 2>&1 | sed 's/^/[admin-test] /' &
            checks["admin-test"]=$!
          fi
          
          # Functions checks
          if [[ "${{ needs.changes.outputs.functions }}" == "true" ]]; then
            pnpm --filter @suzumina.click/functions build 2>&1 | sed 's/^/[functions-build] /' &
            checks["functions-build"]=$!
            
            # ビルドの完了を待ってからlint/testを実行
            wait ${checks["functions-build"]}
            build_result=$?
            
            if [ $build_result -eq 0 ]; then
              echo "✅ functions-build completed"
              
              pnpm --filter @suzumina.click/functions lint 2>&1 | sed 's/^/[functions-lint] /' &
              checks["functions-lint"]=$!
              
              pnpm --filter @suzumina.click/functions test --run 2>&1 | sed 's/^/[functions-test] /' &
              checks["functions-test"]=$!
            else
              echo "❌ functions-build failed"
              exit 1
            fi
          fi
          
          # 全チェックの完了を待つ
          failed=false
          for check_name in "${!checks[@]}"; do
            if [[ $check_name != "functions-build" ]]; then  # already handled
              if wait ${checks[$check_name]}; then
                echo "✅ $check_name completed"
              else
                echo "❌ $check_name failed"
                failed=true
              fi
            fi
          done
          
          if $failed; then
            echo "❌ Some checks failed"
            exit 1
          else
            echo "🎉 All checks completed successfully"
          fi

  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [changes, parallel-check]
    if: always() && !failure() && !cancelled()
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Verify builds
        run: |
          echo "🏗️ Verifying production builds..."
          
          # Build shared dependencies first
          pnpm --filter @suzumina.click/shared-types build
          
          # Build affected apps
          if [[ "${{ needs.changes.outputs.web }}" == "true" ]]; then
            echo "Building web app..."
            pnpm --filter @suzumina.click/web build
          fi
          
          if [[ "${{ needs.changes.outputs.admin }}" == "true" ]]; then
            echo "Building admin app..."
            pnpm --filter @suzumina.click/admin build
          fi
          
          echo "✅ All builds verified successfully"

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: contains(github.event.pull_request.title, 'deps') || contains(github.event.pull_request.title, 'security') || contains(github.event.pull_request.labels.*.name, 'security')
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Security audit
        run: pnpm audit --audit-level moderate

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [changes, parallel-check, build-check, security-check]
    if: always()
    
    steps:
      - name: Generate PR summary
        run: |
          echo "## 🔍 PR Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📁 Changed Components" >> $GITHUB_STEP_SUMMARY
          echo "- Web App: ${{ needs.changes.outputs.web == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Admin App: ${{ needs.changes.outputs.admin == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Functions: ${{ needs.changes.outputs.functions == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Shared Types: ${{ needs.changes.outputs.shared-types == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "- UI Package: ${{ needs.changes.outputs.ui == 'true' && '✅' || '⏭️' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🧪 Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- Parallel Check: ${{ needs.parallel-check.result == 'success' && '✅ Passed' || needs.parallel-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Verification: ${{ needs.build-check.result == 'success' && '✅ Passed' || needs.build-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Check: ${{ needs.security-check.result == 'success' && '✅ Passed' || needs.security-check.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 💡 Optimization Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Only changed components tested" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Parallel execution for all checks" >> $GITHUB_STEP_SUMMARY
          echo "- ⏱️  ~70% faster with parallel runs" >> $GITHUB_STEP_SUMMARY
          echo "- 💰 Significant cost reduction" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 Early feedback for developers" >> $GITHUB_STEP_SUMMARY