name: Claude Code Review

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: write

jobs:
  claude-review:
    if: |
      (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Post Acknowledgment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let pr_number;
            if (context.eventName === 'issue_comment') {
              pr_number = context.issue.number;
            } else if (context.eventName === 'pull_request_review_comment') {
              pr_number = context.payload.pull_request.number;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: 'ü§ñ Claude is analyzing your request...'
            });

      - name: Get PR Details and Call Claude
        id: claude-review
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Determine PR number based on event type
            let pr_number;
            if (context.eventName === 'issue_comment') {
              pr_number = context.issue.number;
            } else if (context.eventName === 'pull_request_review_comment') {
              pr_number = context.payload.pull_request.number;
            }
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // Get PR files (limited to prevent token overflow)
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // Prepare context for Claude
            const limitedFiles = files.slice(0, 10).map(file => ({
              filename: file.filename,
              status: file.status,
              additions: file.additions,
              deletions: file.deletions,
              patch: file.patch ? file.patch.substring(0, 2000) : ''
            }));
            
            // Prepare Claude API request
            const userMessage = `
            Review this PR and respond to the comment.
            
            Comment: ${context.payload.comment.body}
            Author: ${context.payload.comment.user.login}
            
            PR Title: ${pr.title}
            PR Description: ${pr.body || 'No description provided'}
            Total Files: ${files.length}
            
            File Changes:
            ${limitedFiles.map(f => `- ${f.filename} (${f.status}): +${f.additions} -${f.deletions}`).join('\n')}
            
            Code Changes (first 10 files, truncated):
            ${limitedFiles.map(f => `File: ${f.filename}\n${f.patch}\n---`).join('\n\n')}
            `;
            
            // Call Claude API
            const anthropicApiKey = process.env.ANTHROPIC_API_KEY;
            
            if (!anthropicApiKey) {
              core.setOutput('error', 'true');
              core.setOutput('message', 'ANTHROPIC_API_KEY is not set in repository secrets');
              console.log('ANTHROPIC_API_KEY is not found in environment');
              return;
            }
            
            console.log('ANTHROPIC_API_KEY is set, length:', anthropicApiKey.length);
            
            try {
              const response = await fetch('https://api.anthropic.com/v1/messages', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'x-api-key': anthropicApiKey,
                  'anthropic-version': '2023-06-01'
                },
                body: JSON.stringify({
                  model: 'claude-3-opus-20240229',
                  max_tokens: 2048,
                  temperature: 0,
                  system: 'You are Claude, an AI assistant specialized in code review. Provide constructive, helpful feedback on GitHub pull requests. Focus on code quality, potential bugs, performance, and security. Format responses in GitHub-flavored Markdown. Be concise but thorough.',
                  messages: [{
                    role: 'user',
                    content: userMessage
                  }]
                })
              });
              
              console.log('API Response status:', response.status);
              
              if (!response.ok) {
                const errorText = await response.text();
                console.error('API Error Response:', errorText);
                
                let errorMessage = 'Unknown error';
                try {
                  const errorData = JSON.parse(errorText);
                  errorMessage = errorData.error?.message || errorData.message || errorText;
                } catch (e) {
                  errorMessage = errorText;
                }
                
                core.setOutput('error', 'true');
                core.setOutput('message', `API Error (${response.status}): ${errorMessage}`);
                return;
              }
              
              const data = await response.json();
              console.log('API Response received successfully');
              
              if (!data.content || !data.content[0] || !data.content[0].text) {
                core.setOutput('error', 'true');
                core.setOutput('message', 'Invalid response format from Claude API');
                return;
              }
              
              core.setOutput('error', 'false');
              core.setOutput('message', data.content[0].text);
              
            } catch (error) {
              console.error('Error calling Claude API:', error);
              core.setOutput('error', 'true');
              core.setOutput('message', `Error calling Claude API: ${error.message}`);
            }

      - name: Post Review Result
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let pr_number;
            if (context.eventName === 'issue_comment') {
              pr_number = context.issue.number;
            } else if (context.eventName === 'pull_request_review_comment') {
              pr_number = context.payload.pull_request.number;
            }

            const outputs = ${{ toJSON(steps.claude-review.outputs) }};
            const isError = outputs.error === 'true';
            const message = outputs.message || 'No response received';
            
            let body = '';
            
            if (isError) {
              body = `## ‚ö†Ô∏è Claude Review Error\n\n${message}\n\n`;
              body += `### Troubleshooting\n`;
              body += `- Ensure \`ANTHROPIC_API_KEY\` is set in repository secrets\n`;
              body += `- Check if the API key has available credits\n`;
              body += `- Verify the API key permissions\n`;
            } else {
              body = `## ü§ñ Claude Code Review\n\n${message}\n\n`;
              body += `---\n`;
              body += `*Review requested by @${{ github.event.comment.user.login }}*`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: body
            });