name: '本番環境デプロイ'

on:
  # 手動トリガー
  workflow_dispatch:
    inputs:
      branch:
        description: 'デプロイするブランチ'
        required: true
        default: 'main'
        type: string
  
  # mainブランチへのマージ後、CI成功時に自動実行
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed

# 共通の環境変数
env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10'
  REGION: 'asia-northeast1'

jobs:
  # デプロイ条件の確認
  verify-deployment-conditions:
    name: 'デプロイ条件の確認'
    runs-on: ubuntu-latest
    # CIワークフローが成功した場合または手動トリガーの場合のみ実行
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    
    steps:
      - name: デプロイ情報を出力
        run: |
          echo "デプロイ情報:"
          echo "- デプロイ元: ${{ github.event_name == 'workflow_dispatch' && 'Manual trigger' || 'CI workflow' }}"
          echo "- ブランチ: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}"
          echo "- コミット: ${{ github.sha }}"
          echo "- 実行者: ${{ github.actor }}"
          echo "- 日時: $(date '+%Y年%m月%d日 %H:%M:%S')"
    
    outputs:
      deploy_branch: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || 'main' }}

  # Next.jsウェブアプリケーションのデプロイ
  deploy-web-app:
    name: 'Webアプリケーションデプロイ'
    needs: verify-deployment-conditions
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.verify-deployment-conditions.outputs.deploy_branch }}
      
      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: pnpm のインストール
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: 依存関係のキャッシュ
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-web-${{ hashFiles('apps/web/pnpm-lock.yaml', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-web-
      
      - name: 依存関係のインストール
        run: pnpm install
      
      - name: Next.jsアプリのビルド
        run: pnpm --filter @suzumina.click/web build
      
      # 最小権限のサービスアカウントでGoogle Cloudに認証
      - name: Google Cloud認証の設定
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-run-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # Docker認証の設定
      - name: Dockerの認証設定
        run: |
          gcloud auth configure-docker asia-northeast1-docker.pkg.dev
      
      # Dockerイメージのビルドとプッシュ
      - name: Dockerイメージのビルドとプッシュ
        id: docker-build
        run: |
          # イメージタグの設定（コミットハッシュとlatestを両方設定）
          GIT_SHA=$(git rev-parse --short HEAD)
          IMAGE_BASE="asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/suzumina-click/nextjs-app"
          IMAGE_TAG="${IMAGE_BASE}:${GIT_SHA}"
          IMAGE_LATEST="${IMAGE_BASE}:latest"
          
          echo "イメージをビルドしています: ${IMAGE_TAG}"
          
          # ビルドとタグ付け
          docker build -t ${IMAGE_TAG} -t ${IMAGE_LATEST} ./apps/web
          
          # イメージのプッシュ
          docker push ${IMAGE_TAG}
          docker push ${IMAGE_LATEST}
          
          echo "イメージがプッシュされました: ${IMAGE_TAG}"
          echo "image=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      
      # Cloud Runへのデプロイ
      - name: Cloud Runへのデプロイ
        id: deploy-run
        run: |
          echo "Cloud Runサービスをデプロイしています..."
          
          # デプロイコマンド
          gcloud run deploy suzumina-click-nextjs-app \
            --image=${{ steps.docker-build.outputs.image }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --quiet
          
          echo "デプロイが完了しました"
      
      # デプロイ後の確認
      - name: デプロイ結果の確認
        run: |
          # デプロイされたURLを取得して表示
          URL=$(gcloud run services describe suzumina-click-nextjs-app --platform=managed --region=${{ env.REGION }} --format="value(status.url)")
          echo "デプロイURL: $URL"
          echo "::notice title=Webアプリケーションデプロイ完了::$URL にデプロイされました"

  # Cloud Functionsのデプロイ
  deploy-cloud-functions:
    name: 'Cloud Functionsデプロイ'
    needs: [verify-deployment-conditions, deploy-web-app]
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.verify-deployment-conditions.outputs.deploy_branch }}
      
      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: pnpm のインストール
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
      
      - name: 依存関係のキャッシュ
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-functions-${{ hashFiles('apps/functions/pnpm-lock.yaml', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-functions-
      
      - name: 依存関係のインストール
        run: pnpm install
      
      - name: Cloud Functionsのビルド
        run: pnpm --filter @suzumina.click/functions build
      
      # 最小権限のサービスアカウントでGoogle Cloudに認証
      - name: Google Cloud認証の設定
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'cloud-functions-deployer-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
      
      # gcloud CLIをセットアップ
      - name: gcloud CLIのセットアップ
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      # 関数一覧を取得
      - name: 関数一覧の取得
        id: functions
        run: |
          FUNCTIONS=$(grep -r "export.*async function" ./apps/functions/src --include="*.ts" | grep -v ".test.ts" | sed -E 's/.*export.*function ([a-zA-Z0-9_]+).*/\1/' | tr '\n' ' ')
          echo "デプロイする関数: $FUNCTIONS"
          echo "names=$FUNCTIONS" >> $GITHUB_OUTPUT
      
      # Cloud Functionsのデプロイ
      - name: Cloud Functionsデプロイ
        run: |
          # 関数名のリストをスペースで分割して処理
          FUNCTIONS="${{ steps.functions.outputs.names }}"
          for FUNC in $FUNCTIONS; do
            echo "関数 $FUNC をデプロイしています..."
            
            # gcloudコマンドで関数をデプロイ
            gcloud functions deploy $FUNC \
              --gen2 \
              --region=${{ env.REGION }} \
              --runtime=nodejs20 \
              --source=./apps/functions \
              --entry-point=$FUNC
            
            if [ $? -eq 0 ]; then
              echo "関数 $FUNC のデプロイに成功しました"
            else
              echo "関数 $FUNC のデプロイに失敗しました"
              exit 1
            fi
          done
      
      # デプロイ情報の出力
      - name: デプロイサマリー
        run: |
          FUNCTIONS="${{ steps.functions.outputs.names }}"
          echo "デプロイ完了した関数:"
          for FUNC in $FUNCTIONS; do
            DETAILS=$(gcloud functions describe $FUNC --region=${{ env.REGION }} --gen2 --format="yaml(url)")
            URL=$(echo "$DETAILS" | grep "url:" | awk '{print $2}')
            echo "- $FUNC: $URL"
          done
          echo "::notice title=Cloud Functionsデプロイ完了::すべての関数がデプロイされました"

  # デプロイ完了通知
  notify-deployment:
    name: 'デプロイ完了通知'
    needs: [deploy-web-app, deploy-cloud-functions]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: デプロイ完了メッセージ
        run: |
          echo "::notice title=本番環境デプロイ完了::すべてのコンポーネントが正常にデプロイされました"
          echo "デプロイ日時: $(date '+%Y年%m月%d日 %H:%M:%S')"