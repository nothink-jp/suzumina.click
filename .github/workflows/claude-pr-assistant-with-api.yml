name: Claude PR Assistant with API

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: write

jobs:
  claude-assistant:
    if: |
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get PR Information
        id: pr-info
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_number = context.issue.number;
            
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // Get PR diff (ÈôêÂÆöÁöÑ„Å´ÂèñÂæó)
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            // ÊúÄÂàù„ÅÆ5„Éï„Ç°„Ç§„É´„ÅÆÂ§âÊõ¥„ÇíÂèñÂæó
            const fileChanges = files.slice(0, 5).map(file => ({
              filename: file.filename,
              status: file.status,
              additions: file.additions,
              deletions: file.deletions,
              patch: file.patch ? file.patch.substring(0, 1000) : '' // ÊúÄÂàù„ÅÆ1000ÊñáÂ≠ó
            }));
            
            return {
              pr_number: pr_number,
              pr_title: pr.title,
              pr_body: pr.body || '',
              files_changed: files.length,
              file_changes: fileChanges,
              comment: context.payload.comment.body,
              comment_author: context.payload.comment.user.login
            };

      - name: Acknowledge Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_info = ${{ steps.pr-info.outputs.result }};
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_info.pr_number,
              body: 'ü§ñ Claude is analyzing your request...'
            });

      - name: Checkout Claude API Action
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/claude-api
          sparse-checkout-cone-mode: false

      - name: Install Claude API Dependencies
        run: |
          cd .github/actions/claude-api
          npm install

      - name: Call Claude API
        id: claude-api
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SYSTEM_PROMPT: |
            You are Claude, an AI assistant helping with GitHub pull request reviews.
            You provide helpful, constructive feedback on code changes.
            Be concise but thorough. Focus on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns if any
            - Suggestions for improvement
            
            Format your response in GitHub-flavored Markdown.
            Use code blocks with language hints when showing code examples.
            Be encouraging and constructive in your feedback.
          USER_MESSAGE: ${{ steps.pr-info.outputs.result }}
          MAX_TOKENS: "2048"
        run: |
          cd .github/actions/claude-api
          # PRÊÉÖÂ†±„ÇíJSONÊñáÂ≠óÂàó„Å®„Åó„Å¶Ê∫ñÂÇô
          PR_INFO='${{ steps.pr-info.outputs.result }}'
          
          # „É¶„Éº„Ç∂„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÊßãÁØâ
          USER_MESSAGE=$(cat <<EOF
          Please review this pull request and respond to the user's comment.
          
          User Comment: $(echo "$PR_INFO" | jq -r '.comment')
          Comment Author: $(echo "$PR_INFO" | jq -r '.comment_author')
          
          PR Title: $(echo "$PR_INFO" | jq -r '.pr_title')
          PR Description: $(echo "$PR_INFO" | jq -r '.pr_body')
          Files Changed: $(echo "$PR_INFO" | jq -r '.files_changed')
          
          File Changes Summary:
          $(echo "$PR_INFO" | jq -r '.file_changes[] | "- \(.filename) (\(.status)): +\(.additions) -\(.deletions)"')
          
          Code Changes (first 5 files, truncated):
          $(echo "$PR_INFO" | jq -r '.file_changes[] | "File: \(.filename)\n\(.patch)\n---"')
          EOF
          )
          
          # Áí∞Â¢ÉÂ§âÊï∞„Å®„Åó„Å¶Ë®≠ÂÆö
          export USER_MESSAGE="$USER_MESSAGE"
          
          # Claude API„ÇíÂëº„Å≥Âá∫„Åó
          node index.js > claude_response.txt 2>&1 || {
            echo "::set-output name=response::Error calling Claude API. Please check if ANTHROPIC_API_KEY is set correctly."
            exit 0
          }
          
          # „É¨„Çπ„Éù„É≥„Çπ„ÇíÂèñÂæó
          if grep -q "::set-output" claude_response.txt; then
            cat claude_response.txt
          else
            echo "::set-output name=response::Error: Unable to get response from Claude API"
          fi

      - name: Post Claude Response
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr_info = ${{ steps.pr-info.outputs.result }};
            const claudeResponse = `${{ steps.claude-api.outputs.response }}`.replace(/%0A/g, '\n').replace(/%0D/g, '\r');
            
            // „É¨„Çπ„Éù„É≥„Çπ„ÇíÊï¥ÂΩ¢
            let response = `## ü§ñ Claude PR Review\n\n`;
            
            if (claudeResponse.includes('Error')) {
              // „Ç®„É©„Éº„ÅÆÂ†¥Âêà
              response += `### ‚ö†Ô∏è ${claudeResponse}\n\n`;
              response += `Please ensure that:\n`;
              response += `1. \`ANTHROPIC_API_KEY\` is correctly set in repository secrets\n`;
              response += `2. The API key has sufficient credits\n`;
              response += `3. The API is accessible from GitHub Actions\n`;
            } else {
              // Ê≠£Â∏∏„Å™„É¨„Çπ„Éù„É≥„Çπ„ÅÆÂ†¥Âêà
              response += claudeResponse;
              response += `\n\n---\n`;
              response += `*Reviewed by Claude AI* ‚Ä¢ `;
              response += `*Responding to @${pr_info.comment_author}*`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_info.pr_number,
              body: response
            });