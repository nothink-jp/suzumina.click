name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # リポジトリ全体の共通検証
  common-lint:
    name: 共通コード検証
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.read_engines.outputs.node_version }}
      pnpm_version: ${{ steps.read_engines.outputs.pnpm_version }}

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      # package.jsonからenginesのバージョンを読み取る
      - name: パッケージからエンジンバージョンを読み取る
        id: read_engines
        run: |
          # package.jsonからNode.jsとpnpmのバージョンを取得
          NODE_VERSION=$(node -p "require('./package.json').engines.node")
          PNPM_VERSION=$(node -p "require('./package.json').engines.pnpm")
          
          echo "取得したバージョン情報: Node.js=$NODE_VERSION, pnpm=$PNPM_VERSION"
          
          # GitHub Actionsの出力として設定
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "pnpm_version=$PNPM_VERSION" >> $GITHUB_OUTPUT

      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ steps.read_engines.outputs.node_version }}
          pnpm-version: ${{ steps.read_engines.outputs.pnpm_version }}

      - name: Biome によるコード検証
        run: pnpm lint

  # Next.jsウェブアプリ（Web）の検証
  web-checks:
    name: 'Webアプリケーション検証'
    needs: common-lint
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.common-lint.outputs.node_version }}

      - name: pnpm のインストール
        uses: pnpm/action-setup@v4
        with:
          version: ${{ needs.common-lint.outputs.pnpm_version }}
          run_install: false
      
      # 依存関係のキャッシュ
      - name: 依存関係のキャッシュ
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-web-${{ hashFiles('apps/web/pnpm-lock.yaml', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-web-
      
      - name: 依存関係のインストール
        run: pnpm install
      
      # テスト実行
      - name: アプリケーションのテスト
        run: pnpm --filter @suzumina.click/web test
      
      # ビルド実行
      - name: アプリケーションのビルド
        run: pnpm --filter @suzumina.click/web build

  # Cloud Functions の検証
  functions-checks:
    name: 'Cloud Functions検証'
    needs: common-lint
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      - name: Node.js のセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.common-lint.outputs.node_version }}

      - name: pnpm のインストール
        uses: pnpm/action-setup@v4
        with:
          version: ${{ needs.common-lint.outputs.pnpm_version }}
          run_install: false
      
      # 依存関係のキャッシュ
      - name: 依存関係のキャッシュ
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            **/node_modules
          key: ${{ runner.os }}-pnpm-functions-${{ hashFiles('apps/functions/pnpm-lock.yaml', 'pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-functions-
      
      - name: 依存関係のインストール
        run: pnpm install
      
      # テスト実行
      - name: アプリケーションのテスト
        run: pnpm --filter @suzumina.click/functions test
      
      # ビルド実行
      - name: アプリケーションのビルド
        run: pnpm --filter @suzumina.click/functions build

  # すべての検証が完了したら通知
  notify-success:
    name: 検証完了通知
    runs-on: ubuntu-latest
    needs: [web-checks, functions-checks]
    if: ${{ success() }}

    steps:
      - name: 検証完了メッセージ
        run: echo "::notice title=CI検証成功::すべてのテストとビルド検証が成功しました！"
      
      # CI成功時にデプロイワークフローをトリガー
      - name: デプロイワークフローをトリガー
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'main',
              inputs: {
                trigger_source: 'ci'
              }
            });