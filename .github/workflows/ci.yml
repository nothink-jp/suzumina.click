name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# ワークフローにactions権限を付与
permissions:
  contents: read
  actions: read  # 統合デプロイの自動トリガーを削除したため、writeからreadに権限を下げる

jobs:
  # リポジトリ全体の共通検証
  common-lint:
    name: 共通コード検証
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.read_engines.outputs.node_version }}
      pnpm_version: ${{ steps.read_engines.outputs.pnpm_version }}

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      # package.jsonからenginesのバージョンを読み取る
      - name: パッケージからエンジンバージョンを読み取る
        id: read_engines
        run: |
          # package.jsonからNode.jsとpnpmのバージョンを取得
          NODE_VERSION=$(node -p "require('./package.json').engines.node")
          PNPM_VERSION=$(node -p "require('./package.json').engines.pnpm")
          
          echo "取得したバージョン情報: Node.js=$NODE_VERSION, pnpm=$PNPM_VERSION"
          
          # GitHub Actionsの出力として設定
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "pnpm_version=$PNPM_VERSION" >> $GITHUB_OUTPUT

      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ steps.read_engines.outputs.node_version }}
          pnpm-version: ${{ steps.read_engines.outputs.pnpm_version }}

      - name: Biome によるコード検証
        run: pnpm lint

  # Next.jsウェブアプリ（Web）の検証
  web-checks:
    name: 'Webアプリケーション検証'
    needs: common-lint
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ needs.common-lint.outputs.node_version }}
          pnpm-version: ${{ needs.common-lint.outputs.pnpm_version }}
          project-path: 'web'
      
      # テスト実行
      - name: アプリケーションのテスト
        run: pnpm --filter @suzumina.click/web test:coverage
      
      # Codecovへカバレッジレポートをアップロード
      - name: Webカバレッジレポートのアップロード
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./apps/web/coverage
          flags: web
          fail_ci_if_error: true
          verbose: true
          # リポジトリ情報を明示的に設定
          slug: nothink-jp/suzumina.click
      
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./apps/web/coverage
          flags: web

      # ビルド実行
      - name: アプリケーションのビルド
        run: pnpm --filter @suzumina.click/web build

  # Cloud Functions の検証
  functions-checks:
    name: 'Cloud Functions検証'
    needs: common-lint
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ needs.common-lint.outputs.node_version }}
          pnpm-version: ${{ needs.common-lint.outputs.pnpm_version }}
          project-path: 'functions'
      
      # テスト実行
      - name: アプリケーションのテスト
        run: pnpm --filter @suzumina.click/functions test:coverage
      
      # Codecovへカバレッジレポートをアップロード
      - name: Functionsカバレッジレポートのアップロード
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./apps/functions/coverage
          flags: functions
          fail_ci_if_error: true
          verbose: true
          # リポジトリ情報を明示的に設定
          slug: nothink-jp/suzumina.click

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./apps/functions/coverage
          flags: functions

      # ビルド実行
      - name: アプリケーションのビルド
        run: pnpm --filter @suzumina.click/functions build

  # すべての検証が完了したら通知
  notify-success:
    name: 検証完了通知
    runs-on: ubuntu-latest
    needs: [web-checks, functions-checks]
    if: ${{ success() }}

    steps:
      - name: 検証完了メッセージ
        run: echo "::notice title=CI検証成功::すべてのテストとビルド検証が成功しました！"
      
      # 注: 重複デプロイ防止のため、CI成功時の統合デプロイトリガーは削除
      # パスベースの個別デプロイワークフローがその役割を担います