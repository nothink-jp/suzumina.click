name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# ワークフローにactions権限を付与
permissions:
  contents: read
  actions: write  # 統合デプロイの自動トリガーのためwrite権限が必要

jobs:
  # リポジトリ全体の共通検証
  common-lint:
    name: 共通コード検証
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.read_engines.outputs.node_version }}
      pnpm_version: ${{ steps.read_engines.outputs.pnpm_version }}

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      # package.jsonからenginesのバージョンを読み取る
      - name: パッケージからエンジンバージョンを読み取る
        id: read_engines
        run: |
          # package.jsonからNode.jsとpnpmのバージョンを取得
          NODE_VERSION=$(node -p "require('./package.json').engines.node")
          PNPM_VERSION=$(node -p "require('./package.json').engines.pnpm")
          
          echo "取得したバージョン情報: Node.js=$NODE_VERSION, pnpm=$PNPM_VERSION"
          
          # GitHub Actionsの出力として設定
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "pnpm_version=$PNPM_VERSION" >> $GITHUB_OUTPUT

      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ steps.read_engines.outputs.node_version }}
          pnpm-version: ${{ steps.read_engines.outputs.pnpm_version }}

      - name: Biome によるコード検証
        run: pnpm lint

  # 共有パッケージのビルド
  shared-build:
    name: '共有パッケージのビルド'
    needs: common-lint
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ needs.common-lint.outputs.node_version }}
          pnpm-version: ${{ needs.common-lint.outputs.pnpm_version }}
      
      # shared-typesをビルド
      - name: 共有パッケージのビルド
        run: pnpm --filter @suzumina.click/shared-types build
        
      # ビルド成果物をキャッシュ
      - name: shared-typesビルド成果物のキャッシュ
        uses: actions/cache/save@v4
        with:
          path: |
            packages/shared-types/dist
          key: shared-types-${{ github.sha }}

  # Cloud Functions の検証
  functions-checks:
    name: 'Cloud Functions検証'
    needs: [common-lint, shared-build]
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      # 複合アクションを使用してNode.js環境をセットアップ
      - name: Node.js環境のセットアップ
        uses: ./.github/actions/setup-node-env
        with:
          node-version: ${{ needs.common-lint.outputs.node_version }}
          pnpm-version: ${{ needs.common-lint.outputs.pnpm_version }}
          project-path: 'functions'
      
      # shared-typesのビルド成果物を復元
      - name: shared-typesビルド成果物の復元
        uses: actions/cache/restore@v4
        with:
          path: |
            packages/shared-types/dist
          key: shared-types-${{ github.sha }}
          fail-on-cache-miss: true
      
      # テスト実行
      - name: アプリケーションのテスト
        run: pnpm --filter @suzumina.click/functions test:coverage
      
      # Codecovへカバレッジレポートをアップロード
      - name: Functionsカバレッジレポートのアップロード
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./apps/functions/coverage
          flags: functions
          fail_ci_if_error: true
          verbose: true
          # リポジトリ情報を明示的に設定
          slug: nothink-jp/suzumina.click

      # アプリケーションのビルド
      - name: アプリケーションのビルド
        run: pnpm --filter @suzumina.click/functions build

  # すべての検証が完了したら通知
  notify-success:
    name: 検証完了通知
    runs-on: ubuntu-latest
    needs: [functions-checks]
    if: ${{ success() }}

    steps:
      - name: 検証完了メッセージ
        run: echo "::notice title=CI検証成功::すべてのテストとビルド検証が成功しました！"

  # mainブランチへのプッシュ時、統合デプロイをトリガー
  trigger-deploy:
    name: 統合デプロイトリガー
    runs-on: ubuntu-latest
    needs: [functions-checks]
    if: ${{ success() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    # トリガー用にactions:write権限が必要
    permissions:
      actions: write

    steps:
      # 統合デプロイを開始（選択的デプロイを廃止し常に両方デプロイする）
      - name: 統合デプロイの開始
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'main',
              inputs: {
                branch: 'main',
                trigger_source: 'ci',
                deploy_functions: 'true',
                ci_run_id: '${{ github.run_id }}'
              }
            });
            console.log('CI成功に基づく統合デプロイをトリガーしました');