name: 'Node.js環境のセットアップ'
description: 'Node.jsとpnpmをセットアップし、依存関係をインストールする'
inputs:
  node-version:
    description: 'Node.jsのバージョン'
    required: true
    default: '22.x'
  pnpm-version:
    description: 'pnpmのバージョン'
    required: true
    default: '10'
  project-path:
    description: 'プロジェクトパス（webまたはfunctions）'
    required: false

runs:
  using: 'composite'
  steps:
    # pnpmのインストール
    - name: pnpm ${{ inputs.pnpm-version }} のインストール
      uses: pnpm/action-setup@v4
      with:
        version: ${{ inputs.pnpm-version }}
        run_install: false

    # Node.jsのセットアップ
    - name: Node.js ${{ inputs.node-version }} のセットアップ
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'pnpm'  # pnpmキャッシュを有効化

    # ビルドキャッシュの復元（Next.js用）
    - name: Next.jsビルドキャッシュの復元
      uses: actions/cache@v4
      if: inputs.project-path == 'web'
      with:
        path: |
          apps/web/.next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('apps/web/package.json') }}-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-${{ hashFiles('apps/web/package.json') }}-
          ${{ runner.os }}-nextjs-

    # pnpm ストアキャッシュの復元（高度なキャッシュ戦略）
    - name: pnpmキャッシュのセットアップ
      uses: actions/cache@v4
      with:
        path: |
          ~/.pnpm-store
          node_modules/.pnpm
          ${{ inputs.project-path && format('apps/{0}/node_modules/.pnpm', inputs.project-path) || '' }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    # 依存関係のインストール
    - name: 依存関係のインストール
      shell: bash
      run: |
        if [ -n "${{ inputs.project-path }}" ]; then
          echo "プロジェクト ${{ inputs.project-path }} の依存関係をインストールします"
          pnpm install --frozen-lockfile --filter "@suzumina.click/${{ inputs.project-path }}..."
        else
          echo "モノレポ全体の依存関係をインストールします"
          pnpm install --frozen-lockfile
        fi