/**
 * Entity V2 Migration Validation Service
 * 
 * 移行後のデータ検証を行うサービス
 * 統計情報の確認、サンプルデータの検証、エンティティ変換テストを実施
 */

import type { AudioButtonV2, VideoV2 } from "@suzumina.click/shared-types";
import { getFirestoreInstance } from "../../infrastructure/firestore";

interface ValidationOptions {
	collections: string[];
	sampleSize?: number;
	verbose?: boolean;
}

interface ValidationResult {
	collection: string;
	totalDocuments: number;
	migratedDocuments: number;
	nonMigratedDocuments: number;
	sampleValidations: Array<{
		docId: string;
		valid: boolean;
		error?: string;
	}>;
	statistics: {
		migrationRate: number;
		errorRate: number;
		averageMigrationAge?: number; // 移行からの経過時間（時間）
	};
}

export class V2MigrationValidationService {
	private readonly firestore = getFirestoreInstance();

	constructor(private readonly options: ValidationOptions) {
		this.options.sampleSize = this.options.sampleSize || 10;
	}

	/**
	 * 全コレクションの検証を実行
	 */
	async validate(): Promise<{ results: ValidationResult[]; allValid: boolean }> {
		console.log("🔍 Entity V2移行の検証を開始します...");
		const results: ValidationResult[] = [];
		let allValid = true;

		for (const collection of this.options.collections) {
			const result = await this.validateCollection(collection);
			results.push(result);

			if (result.statistics.errorRate > 0) {
				allValid = false;
			}
		}

		// レポートの生成
		await this.generateValidationReport(results);

		return { results, allValid };
	}

	/**
	 * 個別コレクションの検証
	 */
	private async validateCollection(collectionName: string): Promise<ValidationResult> {
		console.log(`\n📂 ${collectionName} の検証を開始...`);

		const collection = this.firestore.collection(collectionName);
		
		// 統計情報の収集
		const totalSnapshot = await collection.count().get();
		const totalDocuments = totalSnapshot.data().count;

		const migratedSnapshot = await collection
			.where("_v2Migration", "!=", null)
			.count()
			.get();
		const migratedDocuments = migratedSnapshot.data().count;

		const nonMigratedDocuments = totalDocuments - migratedDocuments;
		const migrationRate = totalDocuments > 0 
			? (migratedDocuments / totalDocuments) * 100 
			: 0;

		console.log(`📊 統計情報:`);
		console.log(`   総ドキュメント数: ${totalDocuments}`);
		console.log(`   移行済み: ${migratedDocuments}`);
		console.log(`   未移行: ${nonMigratedDocuments}`);
		console.log(`   移行率: ${migrationRate.toFixed(2)}%`);

		// サンプル検証
		const sampleValidations = await this.validateSamples(collectionName);
		const errorCount = sampleValidations.filter((v) => !v.valid).length;
		const errorRate = sampleValidations.length > 0
			? (errorCount / sampleValidations.length) * 100
			: 0;

		// 移行時期の分析
		const averageMigrationAge = await this.calculateAverageMigrationAge(collectionName);

		return {
			collection: collectionName,
			totalDocuments,
			migratedDocuments,
			nonMigratedDocuments,
			sampleValidations,
			statistics: {
				migrationRate,
				errorRate,
				averageMigrationAge,
			},
		};
	}

	/**
	 * サンプルドキュメントの検証
	 */
	private async validateSamples(collectionName: string): Promise<ValidationResult["sampleValidations"]> {
		const collection = this.firestore.collection(collectionName);
		const samples = await collection
			.where("_v2Migration", "!=", null)
			.limit(this.options.sampleSize!)
			.get();

		console.log(`\n🔬 ${samples.size}件のサンプルを検証中...`);

		const validations: ValidationResult["sampleValidations"] = [];

		for (const doc of samples.docs) {
			const data = doc.data();
			let valid = true;
			let error: string | undefined;

			try {
				// V2エンティティへの変換テスト
				if (collectionName === "videos") {
					const { VideoV2 } = await import("@suzumina.click/shared-types");
					const video = VideoV2.fromLegacyFormat(data);
					
					// 追加の検証
					this.validateVideoEntity(video, data);
				} else if (collectionName === "audioButtons") {
					const { AudioButtonV2 } = await import("@suzumina.click/shared-types");
					const audioButton = AudioButtonV2.fromLegacyFormat(data);
					
					// 追加の検証
					this.validateAudioButtonEntity(audioButton, data);
				}

				// _v2Migrationフィールドの検証
				if (!data._v2Migration || !data._v2Migration.version) {
					throw new Error("_v2Migrationフィールドが不正です");
				}
			} catch (e) {
				valid = false;
				error = e instanceof Error ? e.message : "不明なエラー";
			}

			validations.push({
				docId: doc.id,
				valid,
				error,
			});

			if (this.options.verbose) {
				console.log(`  ${valid ? "✅" : "❌"} ${doc.id} ${error ? `- ${error}` : ""}`);
			}
		}

		const validCount = validations.filter((v) => v.valid).length;
		console.log(`✅ 検証完了: ${validCount}/${validations.length} 件が有効`);

		return validations;
	}

	/**
	 * Video エンティティの詳細検証
	 */
	private validateVideoEntity(video: VideoV2, originalData: any): void {
		// 必須フィールドの確認
		if (!video.id || !video.title || !video.thumbnailUrl) {
			throw new Error("必須フィールドが欠落しています");
		}

		// データ整合性の確認
		if (video.publishedAt.getTime() > Date.now()) {
			throw new Error("公開日が未来の日付になっています");
		}

		// 統計情報の妥当性
		if (video.statistics.viewCount < 0 || video.statistics.likeCount < 0) {
			throw new Error("統計情報に負の値が含まれています");
		}
	}

	/**
	 * AudioButton エンティティの詳細検証
	 */
	private validateAudioButtonEntity(audioButton: AudioButtonV2, originalData: any): void {
		// 必須フィールドの確認
		if (!audioButton.id || !audioButton.title || !audioButton.sourceVideoId) {
			throw new Error("必須フィールドが欠落しています");
		}

		// 時間範囲の妥当性
		if (audioButton.audioContent.startTime >= audioButton.audioContent.endTime) {
			throw new Error("開始時間が終了時間以降になっています");
		}

		// 統計情報の妥当性
		if (audioButton.statistics.playCount < 0 || audioButton.statistics.likeCount < 0) {
			throw new Error("統計情報に負の値が含まれています");
		}
	}

	/**
	 * 平均移行経過時間の計算
	 */
	private async calculateAverageMigrationAge(collectionName: string): Promise<number | undefined> {
		const collection = this.firestore.collection(collectionName);
		const samples = await collection
			.where("_v2Migration", "!=", null)
			.limit(100)
			.get();

		if (samples.empty) return undefined;

		const now = Date.now();
		let totalAge = 0;
		let count = 0;

		for (const doc of samples.docs) {
			const migrationTime = doc.data()._v2Migration?.migratedAt?.toDate();
			if (migrationTime) {
				totalAge += (now - migrationTime.getTime()) / (1000 * 60 * 60); // 時間単位
				count++;
			}
		}

		return count > 0 ? totalAge / count : undefined;
	}

	/**
	 * 検証レポートの生成
	 */
	private async generateValidationReport(results: ValidationResult[]): Promise<void> {
		const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
		const reportPath = `validation-report-${timestamp}.md`;

		let report = "# Entity V2 Migration Validation Report\n\n";
		report += `Generated at: ${new Date().toISOString()}\n\n`;

		// サマリー
		report += "## Summary\n\n";
		const totalDocs = results.reduce((sum, r) => sum + r.totalDocuments, 0);
		const totalMigrated = results.reduce((sum, r) => sum + r.migratedDocuments, 0);
		const overallRate = totalDocs > 0 ? (totalMigrated / totalDocs) * 100 : 0;

		report += `- Total Documents: ${totalDocs}\n`;
		report += `- Migrated Documents: ${totalMigrated}\n`;
		report += `- Overall Migration Rate: ${overallRate.toFixed(2)}%\n\n`;

		// 各コレクションの詳細
		for (const result of results) {
			report += `## ${result.collection}\n\n`;
			report += `### Statistics\n`;
			report += `- Total: ${result.totalDocuments}\n`;
			report += `- Migrated: ${result.migratedDocuments}\n`;
			report += `- Non-migrated: ${result.nonMigratedDocuments}\n`;
			report += `- Migration Rate: ${result.statistics.migrationRate.toFixed(2)}%\n`;
			report += `- Sample Error Rate: ${result.statistics.errorRate.toFixed(2)}%\n`;
			
			if (result.statistics.averageMigrationAge !== undefined) {
				report += `- Average Migration Age: ${result.statistics.averageMigrationAge.toFixed(1)} hours\n`;
			}

			// エラーの詳細
			const errors = result.sampleValidations.filter((v) => !v.valid);
			if (errors.length > 0) {
				report += `\n### Validation Errors\n`;
				for (const error of errors) {
					report += `- ${error.docId}: ${error.error}\n`;
				}
			}

			report += "\n";
		}

		// 推奨事項
		report += "## Recommendations\n\n";
		const hasErrors = results.some((r) => r.statistics.errorRate > 0);
		const hasUnmigrated = results.some((r) => r.nonMigratedDocuments > 0);

		if (hasErrors) {
			report += "- ⚠️ エラーが検出されました。エラーログを確認して修正してください\n";
		}
		if (hasUnmigrated) {
			report += "- ⚠️ 未移行のドキュメントが存在します。移行を完了させてください\n";
		}
		if (!hasErrors && !hasUnmigrated) {
			report += "- ✅ すべてのドキュメントが正常に移行されています\n";
		}

		// レポートの保存
		const fs = await import("node:fs/promises");
		await fs.writeFile(reportPath, report);
		console.log(`\n📄 検証レポートを保存しました: ${reportPath}`);
	}
}

// CLIとして実行する場合
if (require.main === module) {
	const args = process.argv.slice(2);
	const verbose = args.includes("--verbose");
	const sampleSize = args.includes("--sample-size")
		? Number.parseInt(args[args.indexOf("--sample-size") + 1], 10)
		: 10;

	const validationService = new V2MigrationValidationService({
		collections: ["videos", "audioButtons"],
		sampleSize,
		verbose,
	});

	validationService
		.validate()
		.then(({ allValid }) => {
			if (allValid) {
				console.log("\n✨ すべての検証に合格しました！");
			} else {
				console.error("\n⚠️ 一部の検証に失敗しました");
				process.exit(1);
			}
		})
		.catch((error) => {
			console.error("\n💥 検証中にエラーが発生しました:", error);
			process.exit(1);
		});
}