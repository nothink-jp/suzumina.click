import "@testing-library/jest-dom";
import { act, render, renderHook, screen } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { beforeEach, describe, expect, it, vi } from "vitest";
import { DebugPanel, useDebugHistory } from "./debug-panel";

// Mock debug entry for testing
const mockDebugEntry = {
	timestamp: "2024-01-01T12:00:00.000Z",
	action: "adjustStartTime(1.5)",
	before: { start: 0, end: 0 },
	after: { start: 1.5, end: 0 },
	delta: 1.5,
	expected: 1.5,
	actual: 1.5,
	isValid: true,
	videoDuration: 300,
	clampDetails: {
		newTime: 1.5,
		videoDuration: 300,
		clampedResult: 1.5,
		floatingPointCheck: {
			rawCalculation: 1.5,
			roundedCalculation: 1.5,
			difference: 0,
		},
	},
};

describe("DebugPanel", () => {
	const defaultProps = {
		debugMode: false,
		onToggleDebugMode: vi.fn(),
		debugHistory: [],
		onClearHistory: vi.fn(),
	};

	beforeEach(() => {
		vi.clearAllMocks();
	});

	describe("Basic Rendering", () => {
		it("„Éá„Éê„ÉÉ„Ç∞Âàá„ÇäÊõø„Åà„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
			render(<DebugPanel {...defaultProps} />);

			expect(screen.getByRole("button", { name: /üîß/ })).toBeInTheDocument();
		});

		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâOFF„ÅÆÁä∂ÊÖã„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã", () => {
			render(<DebugPanel {...defaultProps} />);

			const toggleButton = screen.getByRole("button", { name: /üîß/ });
			expect(toggleButton).toHaveTextContent("üîß");
			expect(toggleButton).not.toHaveTextContent("„Éá„Éê„ÉÉ„Ç∞ON");
		});

		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâON„ÅÆÁä∂ÊÖã„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã", () => {
			const props = { ...defaultProps, debugMode: true };
			render(<DebugPanel {...props} />);

			const toggleButton = screen.getByRole("button", { name: /üîß „Éá„Éê„ÉÉ„Ç∞ON/ });
			expect(toggleButton).toHaveTextContent("üîß „Éá„Éê„ÉÉ„Ç∞ON");
		});
	});

	describe("Debug Mode Toggle", () => {
		it("„Éá„Éê„ÉÉ„Ç∞Âàá„ÇäÊõø„Åà„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ„Åß„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅåÂëº„Å∞„Çå„Çã", async () => {
			const user = userEvent.setup();
			const onToggleDebugMode = vi.fn();
			const props = { ...defaultProps, onToggleDebugMode };

			render(<DebugPanel {...props} />);

			const toggleButton = screen.getByRole("button", { name: /üîß/ });
			await user.click(toggleButton);

			expect(onToggleDebugMode).toHaveBeenCalledTimes(1);
		});

		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâONÊôÇ„Å´ÈÅ©Âàá„Å™„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã", () => {
			const props = { ...defaultProps, debugMode: true };
			render(<DebugPanel {...props} />);

			const toggleButton = screen.getByRole("button", { name: /üîß „Éá„Éê„ÉÉ„Ç∞ON/ });
			expect(toggleButton).toHaveClass("bg-orange-100", "text-orange-700");
		});

		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâOFFÊôÇ„Å´ÈÅ©Âàá„Å™„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã", () => {
			render(<DebugPanel {...defaultProps} />);

			const toggleButton = screen.getByRole("button", { name: /üîß/ });
			expect(toggleButton).toHaveClass("text-muted-foreground");
		});
	});

	describe("Debug History Display", () => {
		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâOFF„ÅßÂ±•Ê≠¥„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ", () => {
			const props = {
				...defaultProps,
				debugMode: false,
				debugHistory: [mockDebugEntry],
			};
			render(<DebugPanel {...props} />);

			expect(screen.queryByText("üîß Ë™øÊï¥Â±•Ê≠¥")).not.toBeInTheDocument();
		});

		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâON„ÅßÂ±•Ê≠¥„Åå„Å™„ÅÑÂ†¥Âêà„ÅØÂ±•Ê≠¥„Çª„ÇØ„Ç∑„Éß„É≥„ÅåË°®Á§∫„Åï„Çå„Å™„ÅÑ", () => {
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [],
			};
			render(<DebugPanel {...props} />);

			expect(screen.queryByText("üîß Ë™øÊï¥Â±•Ê≠¥")).not.toBeInTheDocument();
		});

		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâON„ÅßÂ±•Ê≠¥„Åå„ÅÇ„ÇãÂ†¥Âêà„Å´Â±•Ê≠¥„Çª„ÇØ„Ç∑„Éß„É≥„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [mockDebugEntry],
			};
			render(<DebugPanel {...props} />);

			expect(screen.getByText("üîß Ë™øÊï¥Â±•Ê≠¥")).toBeInTheDocument();
		});

		it("„Éá„Éê„ÉÉ„Ç∞„Ç®„É≥„Éà„É™„ÅåÊ≠£„Åó„ÅèË°®Á§∫„Åï„Çå„Çã", () => {
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [mockDebugEntry],
			};
			render(<DebugPanel {...props} />);

			expect(screen.getByText("adjustStartTime(1.5)")).toBeInTheDocument();
			expect(screen.getByText("ÊúüÂæÖÂÄ§: 1.5s ‚Üí ÂÆüÈöõ: 1.5s")).toBeInTheDocument();
			expect(screen.getByText("‚úì")).toBeInTheDocument();
		});

		it("ÁÑ°Âäπ„Å™„Éá„Éê„ÉÉ„Ç∞„Ç®„É≥„Éà„É™„ÅåÈÅ©Âàá„Å´Ë°®Á§∫„Åï„Çå„Çã", () => {
			const invalidEntry = {
				...mockDebugEntry,
				isValid: false,
				expected: 1.5,
				actual: 1.4,
			};
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [invalidEntry],
			};
			render(<DebugPanel {...props} />);

			expect(screen.getByText("‚úó")).toBeInTheDocument();
			expect(screen.getByText("ÊúüÂæÖÂÄ§: 1.5s ‚Üí ÂÆüÈöõ: 1.4s")).toBeInTheDocument();
			expect(screen.getByText("(Ë™§Â∑ÆÊ§úÂá∫)")).toBeInTheDocument();
		});

		it("ÂãïÁîªÊôÇÈñì„Å®„ÇØ„É©„É≥„ÉóÁµêÊûú„ÅÆË©≥Á¥∞„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [mockDebugEntry],
			};
			render(<DebugPanel {...props} />);

			expect(screen.getByText(/ÂãïÁîªÈï∑: 300s/)).toBeInTheDocument();
			expect(screen.getByText(/„ÇØ„É©„É≥„ÉóÁµêÊûú: 1.5s/)).toBeInTheDocument();
		});
	});

	describe("Clear History", () => {
		it("Â±•Ê≠¥„ÇØ„É™„Ç¢„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [mockDebugEntry],
			};
			render(<DebugPanel {...props} />);

			expect(screen.getByRole("button", { name: /Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢/ })).toBeInTheDocument();
		});

		it("Â±•Ê≠¥„ÇØ„É™„Ç¢„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ„Åß„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÅåÂëº„Å∞„Çå„Çã", async () => {
			const user = userEvent.setup();
			const onClearHistory = vi.fn();
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [mockDebugEntry],
				onClearHistory,
			};
			render(<DebugPanel {...props} />);

			const clearButton = screen.getByRole("button", { name: /Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢/ });
			await user.click(clearButton);

			expect(onClearHistory).toHaveBeenCalledTimes(1);
		});
	});

	describe("Multiple Debug Entries", () => {
		it("Ë§áÊï∞„ÅÆ„Éá„Éê„ÉÉ„Ç∞„Ç®„É≥„Éà„É™„ÅåË°®Á§∫„Åï„Çå„Çã", () => {
			const entries = [
				mockDebugEntry,
				{
					...mockDebugEntry,
					timestamp: "2024-01-01T12:01:00.000Z",
					action: "adjustEndTime(2.0)",
					after: { start: 1.5, end: 2.0 },
				},
			];
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: entries,
			};
			render(<DebugPanel {...props} />);

			expect(screen.getByText("adjustStartTime(1.5)")).toBeInTheDocument();
			expect(screen.getByText("adjustEndTime(2.0)")).toBeInTheDocument();
		});

		it("„Çπ„ÇØ„É≠„Éº„É´ÂèØËÉΩ„Å™Â±•Ê≠¥Ë°®Á§∫„Ç®„É™„Ç¢„ÅåË®≠ÂÆö„Åï„Çå„Çã", () => {
			const entries = Array.from({ length: 15 }, (_, i) => ({
				...mockDebugEntry,
				timestamp: `2024-01-01T12:${i.toString().padStart(2, "0")}:00.000Z`,
				action: `adjustStartTime(${i})`,
			}));
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: entries,
			};
			render(<DebugPanel {...props} />);

			const historyContainer = screen
				.getByText("adjustStartTime(0)")
				.closest(".max-h-40.overflow-y-auto");
			expect(historyContainer).toBeInTheDocument();
		});
	});

	describe("Styling and Accessibility", () => {
		it("ÈÅ©Âàá„Å™ARIA„É©„Éô„É´„Å®„É≠„Éº„É´„ÅåË®≠ÂÆö„Åï„Çå„Çã", () => {
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [mockDebugEntry],
			};
			render(<DebugPanel {...props} />);

			const toggleButton = screen.getByRole("button", { name: /üîß „Éá„Éê„ÉÉ„Ç∞ON/ });
			const clearButton = screen.getByRole("button", { name: /Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢/ });

			expect(toggleButton).toBeInTheDocument();
			expect(clearButton).toBeInTheDocument();
		});

		it("ÊúâÂäπ„Ç®„É≥„Éà„É™„Å®ÁÑ°Âäπ„Ç®„É≥„Éà„É™„ÅßÁï∞„Å™„Çã„Çπ„Çø„Ç§„É´„ÅåÈÅ©Áî®„Åï„Çå„Çã", () => {
			const validEntry = mockDebugEntry;
			const invalidEntry = {
				...mockDebugEntry,
				isValid: false,
				timestamp: "2024-01-01T12:01:00.000Z", // Áï∞„Å™„Çã„Çø„Ç§„É†„Çπ„Çø„É≥„Éó„Åß„Ç≠„Éº„ÅÆÈáçË§á„ÇíÂõûÈÅø
			};
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [validEntry, invalidEntry],
			};
			render(<DebugPanel {...props} />);

			const validIcon = screen.getAllByText("‚úì")[0];
			const invalidIcon = screen.getByText("‚úó");

			expect(validIcon).toHaveClass("bg-green-100", "text-green-800");
			expect(invalidIcon).toHaveClass("bg-red-100", "text-red-800");
		});
	});

	describe("Edge Cases", () => {
		it("„ÇØ„É©„É≥„ÉóË©≥Á¥∞ÊÉÖÂ†±„ÅåÊ¨†„Åë„Å¶„ÅÑ„ÇãÂ†¥Âêà„Åß„ÇÇ„Ç®„É©„Éº„Å´„Å™„Çâ„Å™„ÅÑ", () => {
			const entryWithoutClampDetails = {
				...mockDebugEntry,
				clampDetails: undefined,
			};
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [entryWithoutClampDetails],
			};

			expect(() => render(<DebugPanel {...props} />)).not.toThrow();
		});

		it("ÂãïÁîªÊôÇÈñì„ÅåÊú™ÂÆöÁæ©„ÅÆÂ†¥Âêà„Åß„ÇÇ„Ç®„É©„Éº„Å´„Å™„Çâ„Å™„ÅÑ", () => {
			const entryWithoutVideoDuration = {
				...mockDebugEntry,
				videoDuration: undefined,
			};
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [entryWithoutVideoDuration],
			};

			expect(() => render(<DebugPanel {...props} />)).not.toThrow();
		});

		it("ÈùûÂ∏∏„Å´Èï∑„ÅÑ„Ç¢„ÇØ„Ç∑„Éß„É≥Âêç„Åß„ÇÇÊ≠£Â∏∏„Å´Ë°®Á§∫„Åï„Çå„Çã", () => {
			const longActionEntry = {
				...mockDebugEntry,
				action: `adjustStartTime(${Array.from({ length: 100 }, () => "1").join(".")})`,
			};
			const props = {
				...defaultProps,
				debugMode: true,
				debugHistory: [longActionEntry],
			};

			render(<DebugPanel {...props} />);
			expect(screen.getByText(/adjustStartTime/)).toBeInTheDocument();
		});
	});
});

describe("useDebugHistory", () => {
	beforeEach(() => {
		// Mock console.log to avoid spam in test output
		vi.spyOn(console, "log").mockImplementation(() => {});
	});

	afterEach(() => {
		vi.restoreAllMocks();
	});

	describe("Initial State", () => {
		it("ÂàùÊúüÁä∂ÊÖã„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Çã", () => {
			const { result } = renderHook(() => useDebugHistory());

			expect(result.current.debugMode).toBe(false);
			expect(result.current.debugHistory).toEqual([]);
		});
	});

	describe("Debug Mode Toggle", () => {
		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅÆÂàá„ÇäÊõø„Åà„ÅåÂãï‰Ωú„Åô„Çã", () => {
			const { result } = renderHook(() => useDebugHistory());

			act(() => {
				result.current.toggleDebugMode();
			});

			expect(result.current.debugMode).toBe(true);

			act(() => {
				result.current.toggleDebugMode();
			});

			expect(result.current.debugMode).toBe(false);
		});
	});

	describe("Debug Entry Management", () => {
		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâON„Åß„Ç®„É≥„Éà„É™„ÅåËøΩÂä†„Åï„Çå„Çã", () => {
			const { result } = renderHook(() => useDebugHistory());

			act(() => {
				result.current.toggleDebugMode(); // Enable debug mode
			});

			act(() => {
				result.current.addDebugEntry(mockDebugEntry);
			});

			expect(result.current.debugHistory).toHaveLength(1);
			expect(result.current.debugHistory[0]).toEqual(mockDebugEntry);
		});

		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâOFF„Åß„Ç®„É≥„Éà„É™„ÅåËøΩÂä†„Åï„Çå„Å™„ÅÑ", () => {
			const { result } = renderHook(() => useDebugHistory());

			act(() => {
				result.current.addDebugEntry(mockDebugEntry);
			});

			expect(result.current.debugHistory).toHaveLength(0);
		});

		it("Â±•Ê≠¥„Åå10‰ª∂„Å´Âà∂Èôê„Åï„Çå„Çã", () => {
			const { result } = renderHook(() => useDebugHistory());

			act(() => {
				result.current.toggleDebugMode(); // Enable debug mode
			});

			// Add 15 entries
			for (let i = 0; i < 15; i++) {
				act(() => {
					result.current.addDebugEntry({
						...mockDebugEntry,
						timestamp: `2024-01-01T12:${i.toString().padStart(2, "0")}:00.000Z`,
						action: `action${i}`,
					});
				});
			}

			expect(result.current.debugHistory).toHaveLength(10);
			// Should keep the last 10 entries
			expect(result.current.debugHistory[0].action).toBe("action5");
			expect(result.current.debugHistory[9].action).toBe("action14");
		});

		it("Â±•Ê≠¥„ÅÆ„ÇØ„É™„Ç¢„ÅåÂãï‰Ωú„Åô„Çã", () => {
			const { result } = renderHook(() => useDebugHistory());

			act(() => {
				result.current.toggleDebugMode(); // Enable debug mode
			});

			act(() => {
				result.current.addDebugEntry(mockDebugEntry);
			});

			expect(result.current.debugHistory).toHaveLength(1);

			act(() => {
				result.current.clearHistory();
			});

			expect(result.current.debugHistory).toHaveLength(0);
		});
	});

	describe("Console Logging", () => {
		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâON„Åß„Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÅåÂá∫Âäõ„Åï„Çå„Çã", () => {
			const { result } = renderHook(() => useDebugHistory());

			act(() => {
				result.current.toggleDebugMode(); // Enable debug mode
			});

			act(() => {
				result.current.addDebugEntry(mockDebugEntry);
			});

			expect(console.log).toHaveBeenCalledWith("üîß Debug Entry:", mockDebugEntry);
		});

		it("„Éá„Éê„ÉÉ„Ç∞„É¢„Éº„ÉâOFF„Åß„Ç≥„É≥„ÇΩ„Éº„É´„É≠„Ç∞„ÅåÂá∫Âäõ„Åï„Çå„Å™„ÅÑ", () => {
			const { result } = renderHook(() => useDebugHistory());

			act(() => {
				result.current.addDebugEntry(mockDebugEntry);
			});

			expect(console.log).not.toHaveBeenCalled();
		});
	});

	describe("Performance", () => {
		it("Â§ßÈáè„ÅÆ„Ç®„É≥„Éà„É™ËøΩÂä†„Åß„ÇÇ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Åå‰øù„Åü„Çå„Çã", () => {
			const { result } = renderHook(() => useDebugHistory());

			act(() => {
				result.current.toggleDebugMode(); // Enable debug mode
			});

			const startTime = performance.now();

			for (let i = 0; i < 1000; i++) {
				act(() => {
					result.current.addDebugEntry({
						...mockDebugEntry,
						action: `action${i}`,
					});
				});
			}

			const endTime = performance.now();
			const duration = endTime - startTime;

			// Should complete within reasonable time
			expect(duration).toBeLessThan(1000);
			// Should still maintain the 10-entry limit
			expect(result.current.debugHistory).toHaveLength(10);
		});
	});

	describe("Memory Management", () => {
		it("„Ç¢„É≥„Éû„Ç¶„É≥„ÉàÊôÇ„Å´„É°„É¢„É™„É™„Éº„ÇØ„ÅåÁô∫Áîü„Åó„Å™„ÅÑ", () => {
			const { unmount } = renderHook(() => useDebugHistory());

			expect(() => unmount()).not.toThrow();
		});
	});
});
